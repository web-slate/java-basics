{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Webslate - Java Basics","text":"<p>Welcome to the Webslate documentation for Java Basics.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>jdbc</li> <li>advanced</li> <li>math</li> <li>math_algorithms</li> <li>search_algorithms</li> <li>algorithms</li> <li>Operators</li> <li>loop</li> <li>control_flow</li> <li>exception_handling</li> <li>methods</li> <li>recursion</li> <li>variables</li> <li>basics</li> <li>array_list</li> <li>hash_map</li> <li>hash_set</li> <li>linked_list</li> <li>vector_list</li> <li>collections_framework</li> <li>array</li> <li>data_structures</li> <li>String</li> <li>math</li> <li>fixed_array</li> <li>non_primitive_data_type</li> <li>primitive_data_type</li> <li>data_types</li> <li>move_zeroes</li> <li>easy</li> <li>find_score_of_all_prefixes_of_an_array</li> <li>medium</li> <li>array</li> <li>valid_palindrome</li> <li>valid_palindrome_2</li> <li>easy</li> <li>string</li> <li>two_sum</li> <li>leet_code</li> <li>abstraction</li> <li>inheritance</li> <li>polymorphism</li> <li>oops</li> <li>utils</li> </ul>"},{"location":"algorithms/introduction","title":"Algorithm Basics goes here","text":""},{"location":"algorithms/math","title":"Math","text":"<p>This section covers math.</p> <ul> <li>interest_calculator.md</li> </ul>"},{"location":"algorithms/math/interest_calculator","title":"Interest Calculator","text":"<p>File Name: InterestCalculator.java <pre><code>package algorithms.math;\n\nimport java.util.Scanner;\n\npublic class InterestCalculator {\n  public static void main(String args[]) {\n    int accountId; \n    double balance;\n    double interestRate;\n\n    Scanner sc = new Scanner(System.in);\n    System.out.println(\"Enter the Account ID\");\n    accountId = sc.nextInt();\n\n    System.out.println(\"Enter the Balance\");\n    balance = sc.nextDouble();\n\n    System.out.println(\"Enter the Intrest Rate\");\n    interestRate = sc.nextDouble();\n\n    Account account = new Account(accountId, balance, interestRate);\n    int noOfYear;\n    System.out.println(\"Enter the Year\");\n    noOfYear = sc.nextInt();\n\n    double answer = calculateInterest(account, noOfYear);\n    System.out.format(\"%.3f\", answer);\n  }\n\n  public static double calculateInterest(Account account, int noOfYear) {\n    double temp = noOfYear * account.getInterestRate() / 100;\n    return (account.getBalance() * (account.getInterestRate() + temp) / 100);\n  }\n}\n\nclass Account {\n  private int id;\n  private double balance;\n  private double interestRate;\n\n  Account(int id, double balance, double interestRate) {\n    this.id = id;\n    this.balance = balance;\n    this.interestRate = interestRate;\n  }\n\n  public int getId() {\n    return this.id;\n  }\n\n  public void setId(int id) {\n    this.id = id;\n  }\n\n  public double getBalance() {\n    return this.balance;\n  }\n\n  public void setBalance(double balance) {\n    this.balance = balance;\n  }\n\n  public double getInterestRate() {\n    return this.interestRate;\n  }\n\n  public void setInterestRate(double interestRate) {\n    this.interestRate = interestRate;\n  }\n}\n\n// Compile and Run the below command.\n// javac algorithms/math/InterestCalculator.java &amp;&amp; java algorithms.math.InterestCalculator\n</code></pre></p>"},{"location":"algorithms/math_algorithms","title":"Math Algorithms","text":"<p>This section covers math_algorithms.</p> <ul> <li>euclidean_find_distance.md</li> </ul>"},{"location":"algorithms/math_algorithms/euclidean_find_distance","title":"Euclidean Find Distance","text":"<p>File Name: EuclideanFindDistance.java <pre><code>package algorithms.math_algorithms;\n\nimport java.util.Scanner;\n\npublic class EuclideanFindDistance {\n  public static void main(String args[]) {\n    int x1, y1, x2, y2;\n    Scanner scannerInstance = new Scanner(System.in);\n\n    System.out.println(\"Enter your input\");\n    // Read Input\n    x1 = scannerInstance.nextInt();\n    y1 = scannerInstance.nextInt();\n    x2 = scannerInstance.nextInt();\n    y2 = scannerInstance.nextInt();\n\n    Point p1 = new Point(x1, y1);\n    Point p2 = new Point(x2, y2);\n    double distance = findDistance(p1, p2);\n    System.out.println(distance);\n  }\n\n  public static double findDistance(Point p1, Point p2) {\n    return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + \n    (p2.y - p1.y) * (p2.y - p1.y));\n  }\n}\n\nclass Point {\n  int x, y;\n\n  public Point(int x, int y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\n// Compile and Run the below command.\n// javac algorithms/math/EuclideanFindDistance.java &amp;&amp; java algorithms.math.EuclideanFindDistance\n</code></pre></p>"},{"location":"algorithms/search_algorithms","title":"Search Algorithms","text":"<p>This section covers search_algorithms.</p> <ul> <li>binary_search.md</li> </ul>"},{"location":"algorithms/search_algorithms/binary_search","title":"Binary Search","text":"<p>File Name: BinarySearch.java <pre><code>package algorithms.search_algorithms;\n</code></pre></p>"},{"location":"basics","title":"Basics","text":"<p>This section covers basics.</p> <ul> <li>simple_example.md</li> </ul>"},{"location":"basics/application_server","title":"Application Server","text":""},{"location":"basics/application_server#java-application-server","title":"Java Application Server","text":"<p>Here's a list of popular Java application servers available as of October 2024:</p> Server Initial Release Latest Release Vendor Key Features License Type Java EE Version Support Apache Tomcat 1999 2023 Apache Software Foundation Lightweight, widely used for JSP/Servlets, compatible with Spring Framework Apache License 2.0 Servlet 6.0, JSP 3.1 WildFly (JBoss) 1999 2024 Red Hat Fully Java EE compatible, modular, and supports clustering GPL v2.0 with Classpath Exception Jakarta EE 10 GlassFish 2005 2023 Eclipse Foundation Reference implementation for Jakarta EE, compatible with microservices architectures Eclipse Public License Jakarta EE 10 Payara Server 2014 2023 Payara Services Ltd. Enhanced GlassFish derivative, includes cloud-ready and microservices features Payara Community Edition (Open Source), Payara Enterprise (Commercial) Jakarta EE 10 WebSphere Liberty 2012 2023 IBM Modular, cloud-native, and supports microservices with a high degree of security and scalability IBM Commercial and Free Editions Jakarta EE 9.1, MicroProfile 6.0 Oracle WebLogic 1998 2023 Oracle Enterprise-grade, highly robust with strong clustering, security, and support for distributed applications Proprietary Java EE 8, Jakarta EE 9 Jetty 1995 2024 Eclipse Foundation Lightweight, flexible, often used in embedded systems Apache License 2.0 Servlet 6.0, JSP 3.1 Apache JOnAS 2004 2022 OW2 Consortium Full Java EE server with clustering, open-source LGPL Java EE 7 Tomee 2011 2023 Apache Software Foundation Lightweight and compatible with Tomcat extensions, for Jakarta EE and MicroProfile applications Apache License 2.0 Jakarta EE 8, MicroProfile 4.0"},{"location":"basics/big-o-notations","title":"Big O Notations","text":""},{"location":"basics/big-o-notations#complexity-graph","title":"Complexity Graph","text":"<ul> <li>Constant O(1)</li> <li>Logarithmic O(log n)</li> <li>Linear O(n)</li> <li>Linearithmic O(n log n)</li> <li>Quadratic O(n^2)</li> <li>Cubic O(n^3)</li> <li>Exponential O(2^n)</li> </ul>"},{"location":"basics/big-o-notations#time-complexity-notations-and-examples","title":"Time Complexity Notations and Examples","text":"Character Description Example Problem <code>n</code> Size of the input Linear Search (searching an array of size <code>n</code>) <code>k</code> A specific portion of the input or a constant String Slicing (slicing a substring of length <code>k</code>) <code>m</code> Another input dimension, often used with <code>n</code> Matrix Operations (on an <code>m x n</code> matrix) <code>log n</code> Logarithm of the input size Binary Search (in a sorted array of size <code>n</code>) <code>n^2</code> Square of the input size Bubble Sort (sorting an array of size <code>n</code>) <code>2^n</code> Exponential growth relative to the input size Subset generation (of a set with <code>n</code> elements) <code>n!</code> Factorial of the input size Permutations (finding all permutations of <code>n</code> items)"},{"location":"basics/fast_track","title":"Fast Track","text":""},{"location":"basics/fast_track#core-basics","title":"CORE Basics","text":"<ol> <li> <p>Q: What is Java?</p> <ul> <li>Java is a high-level, object oriented, platform independent programming language. Its key features include being WORA (Write Once, Run Anywhere), </li> <li>having built-in garbage collection, and supporting multithreading.</li> <li>Its different from C++ due to its automatic memory management and absence of pointers.</li> </ul> </li> <li> <p>Q: What is JVM?</p> <ul> <li>JVM means Java Virtual Machine.</li> <li>Its an abstract computing machine responsible for converting java byte code to machine code.</li> </ul> </li> <li> <p>Q: How does garbage collection work in Java?</p> <ul> <li>Garbage collection is the process by which the JVM automatically identifies and discards objects that are no longer in use, freeing up memory resources. </li> <li>The JVM's garbage collector runs periodically, looking for objects that have no active references to free up (eligible for collection).</li> </ul> </li> <li> <p>Q: How to manually trigger garbage collection?</p> <ul> <li>You can suggest it by calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code>. However, this is just a hint to the JVM, and it may choose to ignore the request. The JVM will determine the best time to perform garbage collection based on its internal algorithms.</li> </ul> </li> <li> <p>Q: Different data types in Java? differentiate between primitive and non-primitive data types??</p> <ul> <li>Java supports two main types of data, they are primitive and non-primitive data types.</li> <li>Primitive types: Basic data types like byte, int, short, long, float, double, char, boolean.</li> <li>Non Primitive types: Objects and arrays (e.g., String, ArrayList, etc.). These types are created by the programmer.</li> </ul> </li> <li> <p>Q: What is an array? How do you declare, initialize, and access elements in an array in Java?</p> <ul> <li>An array is a collection of elements of the same type stored in contiguous memory locations.</li> <li>It is used to store multiple values in a single variable.</li> <li>Declaration: <code>int[] numbers</code>;</li> <li>Initialization: <code>numbers = new int[5];</code> or <code>int[] numbers = {1, 2, 3, 4, 5};</code></li> <li>Accessing elements:  Use the index (e.g., <code>numbers[0]</code> to access the first element).</li> </ul> </li> <li> <p>Q: Why data types divided in to two types (primitive and non-primitive)?</p> <ul> <li>answers</li> </ul> </li> <li> <p>Q: Difference between the == operator and the equals() method in Java?</p> <ul> <li>The <code>==</code> operator checks if two references point to the same memory location.</li> <li><code>==</code> operator used to compare primitive data types or to check if two objects refer to the same instance.</li> <li><code>equals()</code> method is used to check if two objects are logically equivalent, meaning it compares the actual content or state of the objects.</li> <li>For example, String class overrides equals() to compare the contents of the strings rather than their memory addresses.</li> </ul> </li> <li> <p>Q: What is the purpose of the try-catch block? What happens if an exception is not caught?</p> <ul> <li>A try-catch block is used to handle exceptions in Java. </li> <li>The code that might throw an exception is placed in the try block, and any handling code goes in the catch block.</li> <li>Exceptions in Java can be handled using try-catch blocks.</li> </ul> </li> <li> <p>Q: What is an exception? How do you handle exceptions in Java?</p> <ul> <li>An exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions. </li> <li>There is Checked exceptions and Unchecked exceptions are exist.</li> </ul> </li> <li> <p>Q: Qistinguishes between Checked exceptions and Unchecked exceptions?</p> <ul> <li>Checked exceptions: Must be caught or declared in the method signature using throws. These are checked at compile time (e.g., IOException)</li> <li>Unchecked exceptions: Do not need to be caught or declared. These occur at runtime (e.g., ArithmeticException, NullPointerException).</li> </ul> </li> <li> <p>Q: What is a package in Java? Why do we use packages?</p> <ul> <li>A package in Java is a namespace that groups related classes and interfaces together. </li> <li>It helps organize code in a modular way, making it easier to manage and avoid naming conflicts.</li> <li>Packages also help in access protection by specifying different access levels for classes and members.</li> <li>Java has built-in packages (e.g., java.lang, java.util), and developers can create custom packages.</li> <li> <p>you cannot have more than one package statement in a single Java source file. However, you can import multiple packages using multiple import statements.</p> </li> </ul> </li> <li> <p>Q: What is a 'String' in Java, and how is it different from a 'StringBuilder' or 'StringBuffer'?</p> <ul> <li>A <code>String</code> in Java is an immutable object, meaning once a String is created then value cannot be changed. </li> <li>But <code>StringBuilder</code> and <code>StringBuffer</code> help to mutate and they are mutable classes that allow you to modify the contents without creating new objects.</li> </ul> </li> <li> <p>Q: Difference between <code>StringBuffer</code> and <code>StringBuilder</code>?</p> <ul> <li><code>StringBuffer</code> is thread-safe (synchronized) but StringBuilder is not.</li> <li><code>StringBuilder</code> faster for single-threaded scenarios.</li> </ul> </li> <li> <p>Q: What are the loops available in Java and give examples?</p> <ul> <li>for loop: When number of iterations is known beforehand.   <pre><code>  for (int i = 0; i &lt; 5; i++) {\n    System.out.println(i);\n  }\n</code></pre></li> <li>while loop: When number of iterations is not known and the loop should continue while a condition is true.   <pre><code>  int i = 0;\n  while (i &lt; 5) {\n      System.out.println(i);\n      i++;\n  }\n</code></pre></li> <li>do-while loop: Similar to the while loop, but the code executes at least once even if the condition is false.   <pre><code>  int i = 0;\n  do {\n      System.out.println(i);\n      i++;\n  } while (i &lt; 5);\n</code></pre></li> <li>Enhanced for loop (for-each): Used for iterating over arrays or collections.   <pre><code>  int[] numbers = {1, 2, 3, 4, 5};\n  for (int num : numbers) {\n      System.out.println(num);\n  }\n</code></pre></li> </ul> </li> <li> <p>Q: List a few more checked exceptions and their examples?</p> <ul> <li>IOException: Occurs when an input-output operation fails.   <pre><code>  import java.io.FileReader;\n  import java.io.IOException;\n\n  public class CheckedExceptionExample {\n      public static void main(String[] args) {\n          try {\n              FileReader reader = new FileReader(\"file.txt\");\n          } catch (IOException e) {\n              e.printStackTrace();\n          }\n      }\n  }\n</code></pre></li> <li> <p>SQLException: Occurs when there is a database access error.   <pre><code>  import java.sql.Connection;\n  import java.sql.DriverManager;\n  import java.sql.SQLException;\n\n  public class DatabaseExample {\n      public static void main(String[] args) {\n          try {\n              Connection connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\");\n          } catch (SQLException e) {\n              e.printStackTrace();\n          }\n      }\n  }\n</code></pre></p> </li> <li> <p>ClassNotFoundException: Occurs when a specified class cannot be found.   <pre><code>  public class ClassNotFoundExample {\n      public static void main(String[] args) {\n          try {\n              Class.forName(\"com.mysql.cj.jdbc.Driver\");\n          } catch (ClassNotFoundException e) {\n              e.printStackTrace();\n          }\n      }\n  }\n</code></pre></p> </li> </ul> </li> </ol>"},{"location":"basics/fast_track#multi-threading","title":"Multi Threading","text":"<ol> <li> <p>Q: What is thread safety?</p> <ul> <li>Share data between Threads: Thread safety ensures that shared data is accessed by multiple threads in a way that prevents data corruption or inconsistency.</li> <li>When an object or method is thread-safe, it means that it can be used safely by multiple threads simultaneously without causing concurrency issues.</li> </ul> </li> <li> <p>Q: Why thread safety?</p> <ul> <li>Thread safety became crucial with the advent of multi-threading capabilities in Java.</li> </ul> </li> <li> <p>Q: When thread safety was introduced?</p> <ul> <li>Supported from the earliest versions of Java (Java 1.0).</li> </ul> </li> <li> <p>Q: When thread safety was introduced?</p> <ul> <li>Supported from the earliest versions of Java (Java 1.0).</li> </ul> </li> <li> <p>Q: When to use thread safety?</p> <ul> <li>When multiple threads need to access shared resources (like a variable, collection, or database).</li> <li>When operations need to be atomic to avoid race conditions.</li> </ul> </li> <li> <p>Q: Give a real-time example of thread safe feature?</p> <ul> <li>A banking application where multiple threads may be processing transactions on the same account simultaneously. For instance, depositing and withdrawing money must be thread-safe to avoid race conditions.</li> <li>Using synchronized blocks or thread-safe collections like ConcurrentHashMap can ensure data consistency.</li> </ul> </li> <li> <p>Q: Give me an example ?</p> <ul> <li>A race condition occurs when two or more threads access shared data and try to change it at the same time without proper synchronization. <pre><code>  public class RaceConditionExample {\n      private int counter = 0;\n\n      public void increment() {\n          counter++;\n      }\n\n      public int getCounter() {\n          return counter;\n      }\n\n      public static void main(String[] args) {\n          RaceConditionExample example = new RaceConditionExample();\n\n          Thread t1 = new Thread(() -&gt; {\n              for (int i = 0; i &lt; 1000; i++) {\n                  example.increment();\n              }\n          });\n\n          Thread t2 = new Thread(() -&gt; {\n              for (int i = 0; i &lt; 1000; i++) {\n                  example.increment();\n              }\n          });\n\n          t1.start();\n          t2.start();\n\n          try {\n              t1.join();\n              t2.join();\n          } catch (InterruptedException e) {\n              e.printStackTrace();\n          }\n\n          // The expected output is 2000, but due to race conditions, the actual output may be less than 2000.\n          System.out.println(\"Final counter value: \" + example.getCounter());\n      }\n  }\n</code></pre></li> </ul> </li> <li> <p>Q: int vs Integer vs AtomicInteger ?</p> Feature <code>int</code> (primitive) <code>Integer</code> (wrapper class) <code>AtomicInteger</code> (thread-safe) Type Primitive data type Reference (wrapper) type, part of the java.lang package Thread-safe class for integer operations Nullability Cannot be <code>null</code> Can be <code>null</code> Cannot be <code>null</code> Memory Usage Less memory, as it is a primitive More memory due to object overhead More memory due to atomic operations Mutability Immutable Immutable (requires creating a new object for changes) Mutable with atomic operations Thread Safety Not thread-safe Not thread-safe Thread-safe Usage Example <code>int a = 5;</code> <code>Integer a = 5;</code> <code>AtomicInteger a = new AtomicInteger(5);</code> Use Case Basic arithmetic operations Useful in collections like <code>ArrayList</code> Useful for concurrency (e.g., counters) Performance in Multithreading - Needs explicit synchronization for thread safety No need for synchronization, better performance <pre><code>  import java.util.concurrent.atomic.AtomicInteger;\n\n  public class IntegerComparisonExample {\n      public static void main(String[] args) {\n          int primitiveInt = 5;\n          Integer wrapperInt = 5;\n          AtomicInteger atomicInt = new AtomicInteger(5);\n\n          // Basic operations\n          primitiveInt += 1;\n          wrapperInt += 1; // Auto-boxing\n          atomicInt.incrementAndGet(); // Thread-safe increment\n\n          System.out.println(\"primitiveInt: \" + primitiveInt); // 6\n          System.out.println(\"wrapperInt: \" + wrapperInt);     // 6\n          System.out.println(\"atomicInt: \" + atomicInt.get()); // 6\n      }\n  }\n</code></pre> </li> <li> <p>Q: List all the atomic types?</p> </li> </ol> Atomic Class Purpose Sample Code AtomicInteger Thread-safe <code>int</code> operations <code>java\\nimport java.util.concurrent.atomic.AtomicInteger;\\nAtomicInteger atomicInt = new AtomicInteger(0);\\natomicInt.incrementAndGet(); // Atomically increments to 1\\nint value = atomicInt.get(); // Gets the current value (1)\\n</code> AtomicLong Thread-safe <code>long</code> operations <code>java\\nimport java.util.concurrent.atomic.AtomicLong;\\nAtomicLong atomicLong = new AtomicLong(10L);\\natomicLong.addAndGet(5); // Adds 5 atomically, result is 15\\nlong value = atomicLong.get(); // Gets the current value (15)\\n</code> AtomicBoolean Thread-safe <code>boolean</code> operations <code>java\\nimport java.util.concurrent.atomic.AtomicBoolean;\\nAtomicBoolean atomicBoolean = new AtomicBoolean(false);\\natomicBoolean.set(true); // Sets to true\\nboolean value = atomicBoolean.get(); // Gets the current value (true)\\n</code> AtomicReference Thread-safe reference for objects <code>java\\nimport java.util.concurrent.atomic.AtomicReference;\\nAtomicReference&lt;String&gt; atomicRef = new AtomicReference&lt;&gt;(\"initial\");\\natomicRef.set(\"updated\"); // Updates atomically\\nString value = atomicRef.get(); // Gets the current value (\"updated\")\\n</code> AtomicIntegerArray Thread-safe <code>int</code> array <code>java\\nimport java.util.concurrent.atomic.AtomicIntegerArray;\\nAtomicIntegerArray atomicArray = new AtomicIntegerArray(5); // Creates an array of size 5\\natomicArray.set(0, 10); // Sets index 0 to 10\\nint value = atomicArray.get(0); // Gets the value at index 0 (10)\\n</code> AtomicLongArray Thread-safe <code>long</code> array <code>java\\nimport java.util.concurrent.atomic.AtomicLongArray;\\nAtomicLongArray atomicLongArray = new AtomicLongArray(3); // Array of size 3\\natomicLongArray.set(1, 100L); // Sets index 1 to 100\\nlong value = atomicLongArray.get(1); // Gets value at index 1 (100)\\n</code> AtomicReferenceArray Thread-safe object array <code>java\\nimport java.util.concurrent.atomic.AtomicReferenceArray;\\nAtomicReferenceArray&lt;String&gt; atomicRefArray = new AtomicReferenceArray&lt;&gt;(3);\\natomicRefArray.set(2, \"Hello\"); // Sets value at index 2\\nString value = atomicRefArray.get(2); // Gets value at index 2 (\"Hello\")\\n</code> AtomicStampedReference Reference with version control <code>java\\nimport java.util.concurrent.atomic.AtomicStampedReference;\\nAtomicStampedReference&lt;String&gt; stampedRef = new AtomicStampedReference&lt;&gt;(\"init\", 1);\\nint[] stamp = new int[1];\\nString value = stampedRef.get(stamp); // Gets value and stamp\\nstampedRef.compareAndSet(\"init\", \"updated\", stamp, stamp + 1); // Updates with stamp\\n</code> AtomicMarkableReference Reference with boolean marker <code>java\\nimport java.util.concurrent.atomic.AtomicMarkableReference;\\nAtomicMarkableReference&lt;String&gt; markableRef = new AtomicMarkableReference&lt;&gt;(\"init\", false);\\nbool[] mark = new bool[1];\\nString value = markableRef.get(mark); // Gets value and mark\\nmarkableRef.compareAndSet(\"init\", \"updated\", false, true); // Updates value and mark\\n</code>"},{"location":"basics/fast_track#oops","title":"OOPS","text":"<ol> <li> <p>Q: What is Class in Java?</p> <ul> <li>Class is a blue print for creating objects.</li> <li>Defining attributes (members / properties / variable)</li> <li>Defining behaviours (methods, class functions)</li> </ul> </li> <li> <p>Q: What is object in Java?</p> <ul> <li>Its an instance of a class.</li> </ul> </li> <li> <p>Q: What is 'this' keyword in Java?</p> <ul> <li>The this keyword in Java is a reference to the current object instance.</li> <li>if a parameter name in a constructor or method has the same name as an instance variable, you can use this to differentiate between the instance variable and the parameter.   <pre><code>  public class Example {\n    int number;\n\n    public Example(int number) {\n        this.number = number; // 'this.number' refers to the instance variable, 'number' is the parameter\n    }\n  }\n</code></pre></li> </ul> </li> <li> <p>Q: What is Access Modifiers in Java?</p> Modifier Description Public No restrictions on access. Accessible from any other class. Private Accessible only within the declared class. Protected Accessible within the same package and subclasses. Default Accessible only within the same package. <pre><code>  package com.example;\n\n  public class AccessModifiersExample {\n      public int publicVar = 1;       // Accessible from anywhere\n      protected int protectedVar = 2; // Accessible within the same package and subclasses\n      int defaultVar = 3;             // Accessible within the same package (default access)\n      private int privateVar = 4;     // Accessible only within this class\n\n      public void publicMethod() {\n          System.out.println(\"Public Method\");\n      }\n\n      protected void protectedMethod() {\n          System.out.println(\"Protected Method\");\n      }\n\n      void defaultMethod() {\n          System.out.println(\"Default Method\");\n      }\n\n      private void privateMethod() {\n          System.out.println(\"Private Method\");\n      }\n  }\n\n  // Example usage in another class within the same package\n  package com.example;\n\n  public class AccessTest {\n      public static void main(String[] args) {\n          AccessModifiersExample example = new AccessModifiersExample();\n          System.out.println(example.publicVar); // Accessible\n          System.out.println(example.protectedVar); // Accessible\n          System.out.println(example.defaultVar); // Accessible\n          // System.out.println(example.privateVar); // Not accessible\n\n          example.publicMethod(); // Accessible\n          example.protectedMethod(); // Accessible\n          example.defaultMethod(); // Accessible\n          // example.privateMethod(); // Not accessible\n      }\n  }\n</code></pre> </li> <li> <p>Q: What is constructor and difference between other methods?</p> <ul> <li>Its a special type of method used to initialize objects.</li> <li>It will be called when an object is created - <code>ClasssName objectName = new ClasssName()</code></li> <li>Unlike regular methods, constructors do not have a return type.</li> <li>Main Difference: Methods perform specific operations, whereas constructors initialize the state of an object.</li> </ul> </li> <li> <p>Q: What is static method, variables in Java?</p> <ul> <li>Static methods and variables belong to the class rather than any specific instance of the class.</li> <li>They can be accessed directly using the class name without creating an object.</li> <li>When to use: Use static members when you want to share the same data or behavior across all instances of a class (e.g., a counter or utility methods like Math.sqrt()).</li> </ul> </li> <li> <p>Q: What is Method overloading in Java and difference between overloading and overriding?</p> <ul> <li>Method Overloading: Allows multiple methods with the same name but different parameter lists (type, number, or both) within the same class.</li> <li> <p>Useful in scenarios where the same operation needs to be performed on different types or numbers of inputs.</p> </li> <li>Method Overriding: Allows a subclass to provide a specific implementation for a method already defined in its parent class.</li> <li> <p>Commonly used in inheritance to provide a specific implementation for a method defined in a superclass. <pre><code>  // Method Overloading: Same method name but different parameters.\n  public class OverloadingExample {\n      public void display(int number) {\n          System.out.println(\"Number: \" + number);\n      }\n\n      public void display(String text) {\n          System.out.println(\"Text: \" + text);\n      }\n\n      public static void main(String[] args) {\n          OverloadingExample example = new OverloadingExample();\n          example.display(10); // Calls the method with int parameter\n          example.display(\"Hello\"); // Calls the method with String parameter\n      }\n  }\n</code></pre></p> </li> </ul> <pre><code>  // Method Overriding: Same method name, parameters, and return type in subclass.\n  class Parent {\n      public void show() {\n          System.out.println(\"Parent's show()\");\n      }\n  }\n\n  class Child extends Parent {\n      @Override\n      public void show() {\n          System.out.println(\"Child's show()\");\n      }\n  }\n\n  public class OverridingExample {\n      public static void main(String[] args) {\n          Parent obj = new Child();\n          obj.show(); // Output: Child's show()\n      }\n  }\n</code></pre> </li> <li> <p>Q: What is the significance of the final keyword in Java?</p> <ul> <li><code>final</code> keyword can be used in three different contexts:</li> <li>Final variable: Its value cannot be changed once initialized (constant).</li> <li>Final method: Cannot be overridden by subclasses.</li> <li>Final class: Cannot be extended by any other class.</li> </ul> </li> </ol>"},{"location":"basics/fast_track#collection-framework","title":"Collection Framework","text":"<ol> <li> <p>Q: Can you explain the difference between ArrayList and LinkedList?</p> <ul> <li>Both ArrayList and LinkedList are implementations of the List interface in Java.</li> <li>ArrayList: Internally uses a dynamic array to store elements.</li> <li>It's more efficient for retrieving elements (get and set operations) because elements can be accessed directly via their index.</li> <li>However, inserting or deleting elements in the middle of the list will be slower because it requires shifting elements.</li> <li>LinkedList: Uses a doubly linked list to store elements.</li> <li>It is more efficient for inserting and deleting elements anywhere in the list.</li> <li>However, accessing elements is slower because it requires traversing the list.</li> </ul> </li> <li> <p>Q: Can I Use equals() for All Collections Like ArrayList, Vector, List, etc.?</p> <ul> <li>Yes, you can use the <code>equals()</code> method for all standard Java collection classes like ArrayList, Vector, LinkedList, etc.</li> <li> <p>When you use <code>equals()</code> on collections, it checks for equality based on the elements and their order in the collection. ```     import java.util.ArrayList;     import java.util.Vector;</p> <p>public class CollectionEqualsExample {     public static void main(String[] args) {         ArrayList list1 = new ArrayList&lt;&gt;();         list1.add(\"A\");         list1.add(\"B\");         list1.add(\"C\"); <pre><code>    Vector&lt;String&gt; list2 = new Vector&lt;&gt;();\n    list2.add(\"A\");\n    list2.add(\"B\");\n    list2.add(\"C\");\n\n    System.out.println(\"Are the collections equal? \" + list1.equals(list2)); // Output: true\n}\n</code></pre> <p>}       ```</p>"},{"location":"basics/introduction","title":"Basics","text":""},{"location":"basics/introduction#introduction","title":"Introduction","text":"<ol> <li>Java programming language created in 1995.</li> <li>Owned by Oracle, and more than 3 billion devices run Java.</li> </ol>"},{"location":"basics/introduction#why-use-java","title":"Why Use Java?","text":"<ol> <li>Java works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)</li> <li>Java is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs</li> </ol>"},{"location":"basics/introduction#historical-details-on-java-version","title":"Historical details on Java Version","text":"<p>LTS means Long Term Support.</p> Version Year Major Features Java 1.0 1996 First public release, JVM, Basic language features, AWT Java 1.1 1997 Inner classes, JavaBeans, JDBC, RMI, JIT compiler Java 1.2 1998 Collections framework, Swing GUI, JIT improvements, strictfp keyword Java 1.3 2000 HotSpot JVM, JNDI, Java Sound API, JPDA Java 1.4 2002 Assert, Regular expressions, Exception chaining, IPv6, XML processing Java 5 2004 Generics, Annotations, Enums, Varargs, Enhanced for loop, Static imports Java 6 2006 Performance optimizations, Scripting support, JDBC 4.0, JAX-WS 2.0 Java 7 2011 Try-with-resources, Diamond operator, Switch with strings, Fork/Join framework Java 8 (LTS) 2014 Lambda expressions, Stream API, Optional class, Date/Time API, Default methods Java 9 2017 Module system, JShell, Collection factory methods, Private interface methods Java 10 2018 Local variable type inference (var), Parallel full GC, Container awareness Java 11 (LTS) 2018 HTTP client API, Launch single-file source code, TLS 1.3 Java 12 2019 Switch expressions (preview), Garbage collector improvements Java 13 2019 Text blocks (preview), Dynamic CDS archives Java 14 2020 Switch expressions (standard), Pattern matching for instanceof (preview) Java 15 2020 Text blocks, Sealed classes (preview), Hidden classes Java 16 2021 Records, Pattern matching for instanceof, Vector API Java 17 (LTS) 2021 Sealed classes, Pattern matching for switch (preview), Random number generators Java 18 2022 UTF-8 by default, Simple web server, Code snippets in Java API documentation Java 19 2022 Virtual threads (preview), Pattern matching for switch (preview), Vector API Java 20 2023 Scoped values (preview), Record patterns (preview), Virtual threads (preview) Java 21 (LTS) 2023 Virtual threads, Pattern matching for switch, Record patterns, Sequenced collections"},{"location":"basics/introduction#top-20-java-terms-in-october-2024","title":"Top 20 Java Terms in October 2024","text":"No. Term Short Description Detailed Example/Usage 1 JDK Software development environment Contains development tools, compiler (javac), debugger, documentation 2 JRE Runtime environment for Java Required to run Java apps, contains core libraries and JVM 3 JVM Virtual machine executing bytecode Provides \"Write Once, Run Anywhere\" capability 4 JAVAC Java compiler command Converts .java files to .class files containing bytecode 5 OOP Programming paradigm based on objects Classes, objects, inheritance, encapsulation, polymorphism 6 Collections Data structure framework List (ArrayList), Set (HashSet), Map (HashMap) implementations 7 Multithreading Concurrent execution of threads Thread creation, synchronization, thread pools 8 Exception Error handling mechanism Checked vs Unchecked exceptions, try-catch-finally blocks 9 JDBC Database connectivity API Database operations using SQL with Java 10 Garbage Collection Automatic memory cleanup Removes unused objects, managed by JVM 11 Servlet Server-side web components Handles HTTP requests/responses in web applications 12 Spring Enterprise application framework Dependency injection, MVC, security, data access 13 Maven Project management tool Build automation, dependency management, project structure 14 Interface Contract for classes Defines abstract methods that classes must implement 15 Abstract Class Partial implementation class Common code for related classes, can't be instantiated 16 Stream API Data processing pipeline Functional operations on collections (filter, map, reduce) 17 Lambda Anonymous function expressions Enables functional programming style: (params) -&gt; expression 18 Design Patterns Standard problem solutions Singleton for single instance, Factory for object creation 19 Serialization Object persistence mechanism Converting objects to byte streams for storage/transfer 20 Unit Testing Code testing methodology Testing individual components using JUnit, TestNG"},{"location":"basics/introduction#jdk-tree-structure","title":"JDK Tree Structure.","text":"<pre><code>JDK (Java Development Kit)\n|\n+--- JRE (Java Runtime Environment)\n     |\n     +--- JVM (Java Virtual Machine)\n     |    |\n     |    +--- Just In Time Compiler (JIT)\n     |    |\n     |    +--- Heap, Stack, registry, and Other memory areas\n     |    |\n     |    +--- ...\n     |\n     +--- Java Class Libraries\n     |    |\n     |    +--- java.lang Package\n     |    |\n     |    +--- java.io Package\n     |    |\n     |    +--- java.util Package\n     |    |\n     |    +--- ...\n     |\n     +--- Java Standard Extensions\n          |\n          +--- JavaFX\n          |\n          +--- Java Accessibility\n          |\n          +--- Java Cryptography Extension (JCE)\n          |\n          +--- ...\n</code></pre>"},{"location":"basics/introduction#things-you-should-know","title":"Things you should know","text":"<ol> <li>Mostly Return type will come before the name.</li> </ol> <p><pre><code>void main(String[] args) {\nreturn main(return type paramName) {}\n</code></pre> 1. JDK for local development machines for coding, compiling, and debugging Java applications.  1. JRE (Java Runtime Environment): Needed in production to run compiled Java applications, end-users use the JRE to run Java applications. 1. The JVM s part of the JRE and is responsible for running .class files (Java bytecode), runtime engine that executes Java bytecode. included in both JDK and JRE. 1. JVM basically does Bytecode Execution, Memory Management, Platform Independence. 1. you can check your java compiler version by <code>javac -version</code> 1. you can check your java version by <code>java -version</code> 1. First compile your java code by <code>javac -verbose basics/Basics.java</code>, After compilation, this will generate java.class file along with package and basic statements. 1. Class name should always start with an uppercase first letter. Run your java class after compiled by <code>java basics.Basics</code> 1. The name of the java file must match the class name. 1. Any code inside the main() method will be executed. 1. You should also note that each code statement must end with a semicolon (;). 1. Text must be wrapped inside double quotations marks \"\". <code>System.out.println(\"Java Basics \");</code> 1. You can use the <code>+</code> character for concatenation to add a variable to another variable: 1. Variable Names can also begin with \"$\" and \"_\".</p>"},{"location":"basics/introduction#other-top-java-terms-in-october-2024","title":"Other Top Java Terms in October 2024","text":"No. Term Short Description Modern Java Focus (2024) 1 Virtual Threads Lightweight threads in Java 21 Project Loom, millions of concurrent threads 2 Records Immutable data classes Compact constructor, automatic getter/hashCode 3 Pattern Matching Enhanced switch and instanceof Switch expressions, type patterns 4 Sealed Classes Restricted class hierarchies Permits clause, definite inheritance 5 Text Blocks Multi-line string literals Triple quotes, better string formatting 6 Modules Java Platform Module System Module-info.java, encapsulation 7 var Type Local variable type inference Improved readability, type inference 8 Stream API Functional data processing Parallel streams, collectors, optional 9 CompletableFuture Async programming model Combining async operations, error handling 10 JShell Java REPL tool Interactive code testing, rapid prototyping 11 String API Updates Enhanced string operations Strip(), isBlank(), repeat() methods 12 Collection Factory Simplified collection creation List.of(), Set.of(), Map.of() 13 Optional API Null handling mechanism orElse(), ifPresent(), map() operations 14 HttpClient Modern HTTP networking Async HTTP requests, WebSocket support 15 Time API Modern date/time handling LocalDate, Instant, Duration classes 16 Interface Changes Interface enhancements Private methods, static methods, default methods 17 GC Improvements Modern garbage collectors ZGC, Shenandoah, G1GC 18 Preview Features Upcoming Java features Structured concurrency, string templates 19 Vector API CPU architecture optimization SIMD operations, parallel computations 20 Foreign Function API Native code integration Replacing JNI, memory access"},{"location":"basics/java_jdk_vendors","title":"Java Jdk Vendors","text":""},{"location":"basics/java_jdk_vendors#java-jdk-vendors","title":"Java JDK Vendors","text":"<p>Here\u2019s a list of major Java Development Kit (JDK) vendors as of October 2024</p> JDK Vendor Initial Release Latest Release Key Features License Type LTS Support Oracle JDK 1996 2024 Official JDK with commercial support, recommended for enterprise environments Oracle Binary Code License for Java SE (Commercial) Yes OpenJDK 2007 2024 Open-source JDK, reference implementation, commonly used as the base for other JDK distributions GPL v2 with Classpath Exception Yes Amazon Corretto 2018 2024 Free, long-term support, optimized for Amazon Web Services GPL v2 with Classpath Exception Yes Azul Zulu 2010 2024 Certified builds for various platforms, includes free and paid support options GPL v2 with Classpath Exception (Community), Commercial (Enterprise) Yes Microsoft Build of OpenJDK 2021 2024 Open-source, customized and optimized for Azure and other Microsoft platforms GPL v2 with Classpath Exception No Red Hat OpenJDK 2007 2024 Enterprise-grade, optimized for Red Hat Enterprise Linux GPL v2 with Classpath Exception Yes IBM Semeru 2021 2024 Builds on OpenJDK, optimized for IBM Cloud and mainframe systems Eclipse Public License 2.0 Yes BellSoft Liberica 2017 2024 Available as standard and full builds (supports JavaFX), long-term support options GPL v2 with Classpath Exception Yes SAP Machine 2018 2024 Optimized for SAP software, fully compatible with OpenJDK GPL v2 with Classpath Exception Yes"},{"location":"basics/simple_example","title":"Simple Example","text":"<p>File Name: SimpleExample.java <pre><code>package basics;\n\npublic class SimpleExample {\n  public static void main(String[] args) {\n    // Below accept parameter and print along with \"Java Basics\".\n    System.out.println(\"Java Basics \" + args[0]); // Here args[0] meant that its first word.\n  }\n}\n\n// javac basics/SimpleExample.java &amp;&amp; java basics.SimpleExample hello\n</code></pre></p>"},{"location":"basics/Operators","title":"Operators","text":"<p>This section covers Operators.</p> <ul> <li>arithmetic_examples.md</li> <li>assignment_examples.md</li> <li>comparision_examples.md</li> </ul>"},{"location":"basics/Operators/arithmetic_examples","title":"Arithmetic Examples","text":"<p>File Name: ArithmeticExamples.java <pre><code>package basics.operators;\n\npublic class ArithmeticExamples {\n  public static void main(String[] args) {\n    int a = 150;\n    int b = 100;\n    System.out.println(\"Addition of 100 + 150:\" + (a + b));\n    System.out.println(\"Subraction of 150 - 100:\" + (a - b));\n    System.out.println(\"Multiplication of 100 * 150:\" + (a * b));\n    System.out.println(\"Division of 150 / 100:\" + (a / b));\n    System.out.println(\"Modulus of 150 % 100:\" + (a % b));\n    System.out.println(\"Pre Increment of 150:\" + (++a));\n    System.out.println(\"Post Decrement of 100:\" + (b--));\n  }\n\n}\n// javac basics/Operators/ArithmeticExamples.java &amp;java basics.Operators.ArithmeticExamples\n</code></pre></p>"},{"location":"basics/Operators/assignment_examples","title":"Assignment Examples","text":"<p>File Name: AssignmentExamples.java <pre><code>package basics.operators;\n\npublic class AssignmentExamples {\n  public static void main(String[] args) {\n    int x = 5; // Assignment operator (=)\n    System.out.println(\"x = \" + x); \n\n    // Addition assignment (+=)\n    x += 3;\n    System.out.println(\"5 += 3 should returns 8 and x is \" + x); \n\n    // Subtraction assignment (-=)\n    x -= 2;\n    System.out.println(\"8 -= 2 should returns 6 and x is: \" + x); \n\n    // Multiplication assignment (*=)\n    x *= 4;\n    System.out.println(\"6 *= 4 should returns 24 and x is: \" + x); \n\n    // Division assignment (/=)\n    x /= 3;\n    System.out.println(\"24 /= 3 should returns 8 and x is \" + x); \n\n    // Modulus assignment (%=)\n    x %= 5;\n    System.out.println(\"8 %= 5 should returns 3 and x is \" + x); \n\n    // Bitwise AND assignment (&amp;=)\n    x=3; // Binary of 3: 011\n    x &amp;= 2; // 10 (binary for 2)\n    System.out.println(\"3 &amp;= 2 should returns 2 and x is \" + x); \n\n    // Bitwise OR assignment (|=)\n    x |= 1; // Equivalent to: x = x | 1\n    System.out.println(\"x |= 1 should returns 3 and x is \" + x); \n\n    // Bitwise XOR assignment (^=)\n    x ^= 3; // Equivalent to: x = x ^ 3\n    System.out.println(\"x ^= 3 should returns 0 and x is \" + x); \n\n    // Right shift assignment (&gt;&gt;=)\n    x = 8; // Binary: 1000\n    x &gt;&gt;= 2; // Shift right by 2 positions\n            // Result: 0010 (2 in decimal\n    System.out.println(\"x &gt;&gt;= 2 should returns 2 and x is \" + x);  \n\n    // Left shift assignment (&lt;&lt;=)\n    x &lt;&lt;= 3; // Equivalent to: x = x &lt;&lt; 3\n    System.out.println(\"x &lt;&lt;= 3 should returns 16 and x is \" + x); \n  }\n}\n\n// javac basics/Operators/AssignmentExamples.java &amp;&amp; java basics.Operators.AssignmentExamples\n</code></pre></p>"},{"location":"basics/Operators/comparision_examples","title":"Comparision Examples","text":"<p>File Name: ComparisionExamples.java <pre><code>package basics.operators;\n\npublic class ComparisionExamples {\n  public static void main(String[] args) {\n    int a = 10;\n    int b = 20;\n    int c = 30;\n    System.out.println(\"State True/False\");\n    System.out.println(\"-\".repeat(30));\n    System.out.println(\"Whether 10 and 20 are equal: \" + (a == b));// Return false since 10 and 20 are not equal\n    System.out.println(\"10 and 20 are not equal: \" + (a != b));// returns True\n    System.out.println(\"10 is lesser than 20 : \" + (a &lt; b));// returns True\n    System.out.println(\"30 is greater than 20: \" + (c &gt; b));// returns True\n  }\n}\n// javac basics/Operators/ComparisionExamples.java &amp;&amp; java basics.Operators.ComparisionExamples\n</code></pre></p>"},{"location":"basics/Operators/interesting","title":"Interesting","text":""},{"location":"basics/Operators/interesting#interesting-facts","title":"Interesting Facts","text":""},{"location":"basics/Operators/interesting#num-0-vs-num-0","title":"num != 0 vs num &gt; 0","text":"<ul> <li>num != 0: checks if the number is not equal to zero evaluate to true for both positive and negative numbers.</li> <li>num &gt; 0: checks if the number is greater than zero only positive numbers.</li> </ul>"},{"location":"basics/Operators/interesting#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li>Modulo for Even/Odd Checks: <code>(number % 2 == 0)</code> - to find even number and else will be odd.</li> <li>Swapping Without a Temporary Variable:   <pre><code>  int a = 5;\n  int b = 10;\n  a = a + b; // a now becomes 15\n  b = a - b; // b becomes 5\n  a = a - b; // a becomes 10\n</code></pre></li> <li> <p>index++: if index is zero and if you print this it will be 0 and increment after this statment / line.</p> </li> <li> <p>Negation with Logical Operators: <code>if (!(isWeekend || isHoliday)) {</code> - check neither weekend nor holiday.</p> </li> </ul>"},{"location":"basics/Operators/interesting#in-logical-operators","title":"In Logical Operators","text":"<ul> <li>Short-Circuit Evaluation: <code>boolean condition2 = (condition1 &amp;&amp; someMethod());</code> - someMethod will not called when condition1 is false.</li> <li>Combining Conditions: <code>(age &gt; 18 &amp;&amp; hasLicense)</code> - you can easily combine conditions.</li> <li>Negation with Logical Operators: <code>if (!(isWeekend || isHoliday)) {</code> - check neither weekend nor holiday.</li> </ul>"},{"location":"basics/Operators/introduction","title":"Java Operatos","text":"<p>Operators are used to perform operations on variables and values.</p>"},{"location":"basics/Operators/introduction#types-of-operators","title":"Types of Operators","text":"<ul> <li>Arithmetic operators</li> <li>Assignment operators</li> <li>Comparison operators</li> <li>Logical operators</li> <li>Bitwise operators</li> </ul>"},{"location":"basics/Operators/introduction#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Arithmetic operators are used to perform common mathematical operations.</p> Operator Name Description Example + Addition Adds together two values x + y - Subtraction Subtracts one value from another x - y * Multiplication Multiplies two values x * y / Division Divides one value by another x / y % Modulus Returns the division remainder x % y ++ Increment Increases the value of a variable by 1 ++x -- Decrement Decreases the value of a variable by 1 --x"},{"location":"basics/Operators/introduction#post-incrementdecrement","title":"Post-Increment/Decrement","text":"<p>Post-Increment (x++): The current value of x is used in the expression, and then x is incremented by 1. Post-Decrement (x--): The current value of x is used in the expression, and then x is decremented by 1.</p>"},{"location":"basics/Operators/introduction#pre-incrementdecrement","title":"Pre-Increment/Decrement","text":"<p>Pre-Increment (++x): x is incremented by 1 first, and then the new value of x is used in the expression. Pre-Decrement (--x): x is decremented by 1 first, and then the new value of x is used in the expression.</p>"},{"location":"basics/Operators/introduction#assignment-operators","title":"Assignment Operators","text":"<p>Assignment operators are used to assign values to variables.</p> Operator Name Operator Example Same As Assignment = x = 5 x = 5 Addition Assignment += x += 3 x = x + 3 Subtraction Assignment -= x -= 3 x = x - 3 Multiplication Assignment *= x *= 3 x = x * 3 Division Assignment /= x /= 3 x = x / 3 Modulus Assignment %= x %= 3 x = x % 3 Bitwise AND Assignment &amp;= x &amp;= 3 x = x &amp; 3 Bitwise OR Assignment |= x |= 3 x = x | 3 Bitwise XOR Assignment ^= x ^= 3 x = x ^ 3 Right Shift Assignment &gt;&gt;= x &gt;&gt;= 3 x = x &gt;&gt; 3 Left Shift Assignment &lt;&lt;= x &lt;&lt;= 3 x = x &lt;&lt; 3"},{"location":"basics/Operators/introduction#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators are used to compare two values.</p> Name Operator Example Equal to == x == y Not equal != x != y Greater than &gt; x &gt; y Less than &lt; x &lt; y Greater than or equal to &gt;= x &gt;= y Less than or equal to &lt;= x &lt;= y"},{"location":"basics/Operators/introduction#logical-operators","title":"Logical Operators","text":"<p>Logical operators are used to determine the logic between variables or values.</p> Name Operator Example Alternative Description Logical and &amp;&amp; x &lt; 5 &amp;&amp; x &lt; 10 AND Returns true if both statements are true Logical or || x &lt; 5 x &lt; 4 Logical not ! !(x &lt; 5 &amp;&amp; x &lt; 10) NOT Reverses the result, returns false if true"},{"location":"basics/control_flow","title":"Control Flow","text":"<p>This section covers control_flow.</p> <ul> <li>else_if_examples.md</li> <li>if_else_examples.md</li> <li>if_examples.md</li> </ul>"},{"location":"basics/control_flow/else_if_examples","title":"Else If Examples","text":"<p>File Name: ElseIfExamples.java <pre><code>package basics.control_flow;\n\npublic class ElseIfExamples {\n  public static void main(String[] args) {\n    int age = 22;\n\n    if (age &lt; 13) {\n      System.out.println(\"You are just child now.\");\n    } else if (age &gt;= 13 &amp;&amp; age &lt; 20) {\n      System.out.println(\"You are a teenager.\");\n    } else if (age &gt;= 20 &amp;&amp; age &lt; 65) {\n      System.out.println(\"You are an adult.\");\n    } else {\n      System.out.println(\"You are a senior citizen.\");\n    }\n  }\n}\n\n//javac basics/control_flow/ElseIfExamples.java &amp;&amp; java basics.control_flow.ElseIfExamples\n</code></pre></p>"},{"location":"basics/control_flow/fast_track","title":"Fast Track","text":""},{"location":"basics/control_flow/fast_track#medium-level-java-coding-questions-that-focus-on-control-flow-statements-including-loops-conditionals-and-switch-statements","title":"Medium-level Java coding questions that focus on control-flow statements, including loops, conditionals, and switch statements.","text":""},{"location":"basics/control_flow/fast_track#question-1-write-a-java-program-that-checks-if-a-given-number-is-prime-the-program-should-prompt-the-user-to-enter-a-number-and-then-output-whether-its-prime-or-not-use-appropriate-control-flow-statements-to-optimize-the-primality-test","title":"Question 1: Write a Java program that checks if a given number is prime. The program should prompt the user to enter a number and then output whether it's prime or not. Use appropriate control flow statements to optimize the primality test.","text":"<pre><code>public class Question1 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number to check if it's prime: \");\n        int number = scanner.nextInt();\n\n        boolean isPrime = true;\n\n        if (number &lt;= 1) {\n            isPrime = false;\n        } else {\n            for (int i = 2; i &lt;= Math.sqrt(number); i++) {\n                if (number % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n        }\n\n        if (isPrime) {\n            System.out.println(number + \" is a prime number.\");\n        } else {\n            System.out.println(number + \" is not a prime number.\");\n        }\n    }\n}\n/* Sample Output\nEnter a number to check if it's prime: 5\n5 is a prime number.*/\n</code></pre>"},{"location":"basics/control_flow/fast_track#question-2-create-a-number-guessing-game-where-the-computer-generates-a-random-number-between-1-and-100-and-the-user-tries-to-guess-it-the-program-should-provide-hints-higherlower-and-count-the-number-of-attempts-use-a-combination-of-loops-and-conditionals-to-implement-this-game","title":"Question 2: Create a number guessing game where the computer generates a random number between 1 and 100, and the user tries to guess it. The program should provide hints (higher/lower) and count the number of attempts. Use a combination of loops and conditionals to implement this game.","text":"<pre><code>import java.util.Scanner;\nimport java.util.Random;\n\npublic class Question2 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Random random = new Random();\n\n        int numberToGuess = random.nextInt(100) + 1;\n        int userGuess;\n        int attempts = 0;\n\n        System.out.println(\"Welcome to the Number Guessing Game!\");\n        System.out.println(\"I'm thinking of a number between 1 and 100.\");\n\n        do {\n            System.out.print(\"Enter your guess: \");\n            userGuess = scanner.nextInt();\n            attempts++;\n\n            if (userGuess &lt; numberToGuess) {\n                System.out.println(\"Higher! Try again.\");\n            } else if (userGuess &gt; numberToGuess) {\n                System.out.println(\"Lower! Try again.\");\n            } else {\n                System.out.println(\"Congratulations! You've guessed the number \" + numberToGuess + \" correctly!\");\n                System.out.println(\"It took you \" + attempts + \" attempts.\");\n            }\n        } while (userGuess != numberToGuess);\n    }\n}\n/*Output\nWelcome to the Number Guessing Game!\nI'm thinking of a number between 1 and 100.\nEnter your guess: 19\nLower! Try again.\nEnter your guess: 8\nCongratulations! You've guessed the number 8 correctly!\nIt took you 2 attempts.*/\n</code></pre>"},{"location":"basics/control_flow/fast_track#question-3-write-a-java-program-that-checks-if-a-given-number-is-an-armstrong-number-an-armstrong-number-is-a-number-that-is-the-sum-of-its-own-digits-each-raised-to-the-power-of-the-number-of-digits-for-example-153-is-an-armstrong-number-because-13-53-33-153-use-appropriate-loops-and-conditionals-to-implement-this","title":"Question 3: Write a Java program that checks if a given number is an Armstrong number. An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits. For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153. Use appropriate loops and conditionals to implement this.","text":"<pre><code>import java.util.Scanner;\n\npublic class Question3 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number to check if it's an Armstrong number: \");\n        int number = scanner.nextInt();\n\n        if (isArmstrong(number)) {\n            System.out.println(number + \" is an Armstrong number.\");\n        } else {\n            System.out.println(number + \" is not an Armstrong number.\");\n        }\n    }\n\n    public static boolean isArmstrong(int num) {\n        int originalNumber = num;\n        int sum = 0;\n        int digits = String.valueOf(num).length();\n\n        while (num &gt; 0) {\n            int digit = num % 10;\n            sum += Math.pow(digit, digits);\n            num /= 10;\n        }\n\n        return sum == originalNumber;\n    }\n}\n/*Output\nEnter a number to check if it's an Armstrong number: 153\n153 is an Armstrong number.\n*/\n</code></pre>"},{"location":"basics/control_flow/if_else_examples","title":"If Else Examples","text":"<p>File Name: IfElseExamples.java <pre><code>package basics.control_flow;\n\n//Else statement displays only when if statement is false\npublic class IfElseExamples{\n  public static void main(String[] args) {\n    int a = 10;\n    int b = 5;\n    if (a &lt; b) {\n      System.out.println(\"5 is greater\"); //This condition is false\n    }\n    else{\n      System.out.println(\"10 is greater\"); \n    }\n  }\n}\n\n//javac basics/control_flow/IfElseExamples.java &amp;&amp; java basics.control_flow.IfElseExamples\n</code></pre></p>"},{"location":"basics/control_flow/if_examples","title":"If Examples","text":"<p>File Name: IfExamples.java <pre><code>package basics.control_flow;\n\n//Use if to specify a block of code to be executed, if a specified condition is true\npublic class IfExamples {\n  public static void main(String[] args) {\n    int a = 10;\n    int b = 5;\n    if (a &gt; b) {\n      System.out.println(\"10 is greater\");\n    }\n    if (a &lt; b) { //10 &lt; 5 which is false\n      System.out.println(\"This won't be printed because the statement is false\");\n    }\n  }\n}\n\n// javac basics/statements/IfExamples.java &amp;&amp; java basics.statements.IfExamples\n</code></pre></p>"},{"location":"basics/control_flow/loop","title":"Loop","text":"<p>This section covers loop.</p> <ul> <li>for_examples.md</li> <li>while_examples.md</li> </ul>"},{"location":"basics/control_flow/loop/BasicLoopProblems","title":"Some Basic Java Coding Problems that focus on using loops","text":""},{"location":"basics/control_flow/loop/BasicLoopProblems#question-1-write-a-java-program-that-prints-numbers-from-1-to-10-using-a-for-loop","title":"Question 1: Write a Java program that prints numbers from 1 to 10 using a for loop.","text":"<pre><code>public class Question1 {\n    public static void main(String[] args) {\n        for (int i = 1; i &lt;= 10; i++) {\n            System.out.print(i);\n        }\n    }\n}\n/*Output\n12345678910*/\n</code></pre>"},{"location":"basics/control_flow/loop/BasicLoopProblems#question-2-write-a-java-program-that-calculates-the-sum-of-all-numbers-from-1-to-100-using-a-while-loop","title":"Question 2: Write a Java program that calculates the sum of all numbers from 1 to 100 using a while loop.","text":"<pre><code>public class Question2 {\n    public static void main(String[] args) {\n        int sum = 0;\n        int i = 1;\n        while (i &lt;= 100) {\n            sum += i;\n            i++;\n        }\n        System.out.println(\"The sum of numbers from 1 to 100 is: \" + sum);\n    }\n}\n//Output\n//The sum of numbers from 1 to 100 is:5050\n</code></pre>"},{"location":"basics/control_flow/loop/BasicLoopProblems#question-3-write-a-java-program-that-prints-the-multiplication-table-from-1-to-10-of-a-number-entered-by-the-user-using-a-for-loop","title":"Question 3: Write a Java program that prints the multiplication table (from 1 to 10) of a number entered by the user using a for loop.","text":"<pre><code>import java.util.Scanner;\n\npublic class Question3 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n\n        for (int i = 1; i &lt;= 10; i++) {\n            System.out.println(number + \" x \" + i + \" = \" + (number * i));\n        }\n    }\n}\n/*Sample Output\nEnter a number: 5\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50\n*/\n</code></pre>"},{"location":"basics/control_flow/loop/BasicLoopProblems#question-4-write-a-java-program-that-calculates-the-factorial-of-a-number-entered-by-the-user-using-a-do-while-loop","title":"Question 4: Write a Java program that calculates the factorial of a number entered by the user using a do-while loop.","text":"<pre><code>import java.util.Scanner;\n\npublic class Question4 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a non-negative integer: \");\n        int number = scanner.nextInt();\n\n        long factorial = 1;\n        int i = 1;\n\n        do {\n            factorial *= i;\n            i++;\n        } while (i &lt;= number);\n\n        System.out.println(\"The factorial of \" + number + \" is: \" + factorial);\n    }\n}\n/* Sample Output\nEnter a non-negative integer: 5\nThe factorial of 5 is: 120\n*/\n</code></pre>"},{"location":"basics/control_flow/loop/BasicLoopProblems#question-5-write-a-java-program-that-prints-the-first-n-numbers-in-the-fibonacci-sequence-where-n-is-entered-by-the-user-use-a-for-loop-to-generate-the-sequence","title":"Question 5: Write a Java program that prints the first n numbers in the Fibonacci sequence, where n is entered by the user. Use a for loop to generate the sequence.","text":"<pre><code>import java.util.Scanner;\n\npublic class Question5 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number of Fibonacci terms to generate: \");\n        int n = scanner.nextInt();\n\n        int first = 0, second = 1;\n\n        System.out.println(\"Fibonacci Sequence:\");\n        for (int i = 1; i &lt;= n; i++) {\n            System.out.print(first + \" \");\n            int next = first + second;\n            first = second;\n            second = next;\n        }\n    }\n}\n/* Sample Output\nEnter the number of Fibonacci terms to generate: 6\nFibonacci Sequence:\n0 1 1 2 3 5 \n*/\n</code></pre>"},{"location":"basics/control_flow/loop/for_examples","title":"For Examples","text":"<p>File Name: ForExamples.java <pre><code>package basics.control_flow.loop;\npublic class ForExamples{\n  public static void main(String[] args) {\n    //Printing string for 5 times using for loop\n  for(int i=1;i&lt;=5;i=i+1){\n    System.out.println(\"Java\");\n}\n  //Print even numbers\n  for(int i=1;i&lt;=10;i=i+1){\n   if(i%2==0){\n      System.out.println(i);\n  }\n}\n  }\n}\n\n//javac basics/statements/loop/ForExamples.java &amp;&amp; java basics.statements.loop.ForExamples\n</code></pre></p>"},{"location":"basics/control_flow/loop/introduction","title":"Loops","text":""},{"location":"basics/control_flow/loop/introduction#different-types-of-loop","title":"Different Types of Loop","text":"<ul> <li>For loop</li> <li>While loop</li> <li>Do-while loop</li> <li>For-each loop</li> </ul>"},{"location":"basics/control_flow/loop/introduction#for-loop","title":"For loop","text":"<p>For loop is a control structure in programming that allows you to repeat a block of code a specific number of times. <pre><code>for (initialization; condition; increment) {\n    // Code to be executed\n}\n</code></pre> 1. Initialization: This step runs once at the beginning and is usually used to define and set the loop counter.</p> <ol> <li> <p>Condition: Before each iteration, this condition is evaluated. If it is true, the loop continues; if false, the loop ends.</p> </li> <li> <p>Increment: This step updates the loop counter after each iteration.</p> </li> </ol> <p>EXAMPLE</p>"},{"location":"basics/control_flow/loop/introduction#for-loop-example-printing-numbers-from-1-to-10","title":"For Loop Example: Printing Numbers from 1 to 10","text":"<pre><code>// This program prints the numbers from 1 to 10, inclusive.\nfor (int i = 1; i &lt;= 10; i = i + 1) {\n    System.out.println(i);\n}\n</code></pre>"},{"location":"basics/control_flow/loop/introduction#explanation-of-above-code","title":"Explanation of above code","text":"<ul> <li> <p>Initialization: <code>int i = 1</code>   Starts the counter at 1.</p> </li> <li> <p>Condition: <code>i &lt;= 10</code>   Continues the loop while <code>i</code> is less than or equal to 10.</p> </li> <li> <p>Increment: <code>i = i + 1</code>   Increases <code>i</code> by 1 after each iteration.</p> </li> <li> <p>Loop Body:   Executes <code>System.out.println(i);</code> to print the current value of <code>i</code> to the console, outputting numbers from 1 to 10.</p> </li> </ul>"},{"location":"basics/control_flow/loop/introduction#while-loop","title":"While loop","text":"<p>The while loop loops through a block of code as long as a specified condition is true <pre><code>while (condition) {\n  // code block to be executed\n}\n</code></pre> EXAMPLE</p>"},{"location":"basics/control_flow/loop/introduction#while-loop-example-printing-numbers-from-1-to-10","title":"While Loop Example: Printing Numbers from 1 to 10","text":"<pre><code>// This program prints the numbers from 1 to 10 using a while loop.\nint i = 1; // Initialization\nwhile (i &lt;= 10) { // Condition\n    System.out.println(i); // Loop Body\n    i++; // Increment\n}\n</code></pre>"},{"location":"basics/control_flow/loop/introduction#explanation","title":"Explanation","text":"<ul> <li>Initialization:</li> <li> <p><code>int i = 1;</code>     Initializes the counter variable <code>i</code> to <code>1</code>.</p> </li> <li> <p>Condition:</p> </li> <li> <p><code>while (i &lt;= 10)</code>     Checks if <code>i</code> is less than or equal to <code>10</code>. The loop executes while this condition is <code>true</code>.</p> </li> <li> <p>Loop Body:</p> </li> <li> <p><code>System.out.println(i);</code>     Prints the current value of <code>i</code> to the console.</p> </li> <li> <p>Increment:</p> </li> <li><code>i++;</code>     Increments <code>i</code> by <code>1</code> after each iteration.</li> </ul> <p><code>For loop and while loop are similar When we dont know the stop value,we can prefer while loop instead</code></p>"},{"location":"basics/control_flow/loop/while_examples","title":"While Examples","text":"<p>File Name: WhileExamples.java <pre><code>package basics.control_flow.loop;\npublic class WhileExamples{\n  //Print the number between 1-100 that are divisible by 3 and 5\n  public static void main(String[] args) {\n    int i = 1;\n\n    while (i &lt;= 100) {\n        if (i % 3 == 0 &amp;&amp; i % 5 == 0) {\n            System.out.println(i);\n        }\n        i++; \n    }\n}\n}\n//javac basics/control_flow/loop/WhileExamples.java &amp;&amp; java basics.control_flow.loop.WhileExamples\n</code></pre></p>"},{"location":"basics/exception_handling/exceptions_types","title":"exceptions_types","text":""},{"location":"basics/exception_handling/throwing_exceptions","title":"throwing_exceptions","text":""},{"location":"basics/exception_handling/try_catch","title":"try_catch","text":""},{"location":"basics/methods/introduction","title":"introduction","text":""},{"location":"basics/methods/method_overloading","title":"method_overloading","text":""},{"location":"basics/recursion","title":"Recursion","text":"<p>This section covers recursion.</p> <ul> <li>basic_recursion_examples.md</li> </ul>"},{"location":"basics/recursion/basic_recursion_examples","title":"Basic Recursion Examples","text":"<p>File Name: BasicRecursionExamples.java </p>"},{"location":"basics/recursion/introduction","title":"recursion","text":""},{"location":"basics/variables","title":"Variables","text":"<p>This section covers variables.</p> <ul> <li>basic_variables_examples.md</li> </ul>"},{"location":"basics/variables/basic_variables_examples","title":"Basic Variables Examples","text":"<p>File Name: BasicVariablesExamples.java <pre><code>package basics.variables;\n\npublic class BasicVariablesExamples {\n  public static void main(String[] args) {\n    String title = \"Basic String Variable\";\n    System.out.println(title);\n    System.out.println(\"--------------------\");\n    final String finalVariable = \"Final Variable helps to prevent overwrite value, you can declare as final.\";\n    final String constantVariable = \"You can declare as constant as well.\";\n    System.out.println(finalVariable);\n    System.out.println(constantVariable);\n    String stringVariable, intVariable, floatVariable, booleanVariable, charVariable;\n    stringVariable = intVariable = floatVariable = booleanVariable = charVariable = \" is Valid variables\";\n    System.out.println(\"String\" + stringVariable);\n    System.out.println(\"Integer \" + intVariable);\n    System.out.println(\"Float\" + floatVariable);\n    System.out.println(\"Boolean\" + booleanVariable);\n    System.out.println(\"Char \" + charVariable);\n  }\n}\n\n// javac basics/variables/BasicVariablesExamples.java &amp;&amp; java basics.variables.BasicVariablesExamples\n</code></pre></p>"},{"location":"collections_framework/introduction","title":"collections_framework","text":""},{"location":"collections_framework/array_list","title":"Array List","text":"<p>This section covers array_list.</p> <ul> <li>array_list_examples.md</li> </ul>"},{"location":"collections_framework/array_list/array_list_examples","title":"Array List Examples","text":"<p>File Name: ArrayListExamples.java <pre><code>package collections_framework.array_list;\n\nimport java.util.ArrayList;\n\npublic class ArrayListExamples {\n\n  public static void main(String[] args) {\n    // Create an ArrayList of Integer (wrapper for int)\n    ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;&gt;();\n\n    numbers.add(10);\n    numbers.add(20);\n    numbers.add(30);\n\n    System.out.println(\"Number at index 1: \" + numbers.get(1)); // Outputs 20\n\n    System.out.println(\"Numbers List:\");\n    for (Integer number : numbers) {\n      System.out.println(number);\n    }\n  }\n}\n// javac collections_framework/array_list/ArrayListExamples.java &amp;&amp; java\n// collections_framework.array_list.ArrayListExamples\n</code></pre></p>"},{"location":"collections_framework/array_list/introduction","title":"Array List","text":"<ul> <li> <p>Java ArrayList is a part of the Java collections framework</p> </li> <li> <p>Array list is useful for creating dynamic sized arrays;(dynamic sized arrays resize themself)</p> </li> <li> <p>We cannot directly use primitive data types  in an ArrayList ; instead we can use wrapper class</p> </li> </ul> <pre><code> // Attempting to create an ArrayList of int (primitive type) - this will cause a compilation error\n        ArrayList&lt;int&gt; numbers = new ArrayList&lt;&gt;();  // Error: int cannot be used as a type argument\n</code></pre> <ul> <li>advantage of ArrayList is it is not neecessary to mention the size\u00a0of\u00a0ArrayList.</li> </ul>"},{"location":"collections_framework/array_list/introduction#difference-between-array-and-arraylist","title":"Difference between Array and ArrayList","text":"Feature Array ArrayList Size Fixed Dynamic Data Type Support Primitives &amp; Objects Objects only Performance Faster Slightly slower due to resizing Memory Efficiency More efficient Less efficient Built-in Methods Fewer More (add, remove, etc.) Use Case Fixed-size data Dynamic data"},{"location":"collections_framework/linked_list/introduction","title":"Linked List","text":"<ul> <li>The LinkedList class is a collection which can contain many objects of the same type, just like the ArrayList.</li> <li>LinkedList stores its items in \"containers.\"</li> <li>Learn about hash code, any object should have hash code</li> </ul>"},{"location":"collections_framework/linked_list/introduction#linkedlist-methods-in-java","title":"LinkedList Methods in Java","text":"<p>In many cases, <code>ArrayList</code> is more efficient for accessing random items in the list. However, <code>LinkedList</code> provides several methods for efficient operations, especially when adding or removing elements at the beginning or end of the list.</p>"},{"location":"collections_framework/linked_list/introduction#method-descriptions-and-examples","title":"Method Descriptions and Examples","text":"Method Description <code>addFirst()</code> Adds an item to the beginning of the list <code>addLast()</code> Adds an item to the end of the list <code>removeFirst()</code> Removes an item from the beginning of the list <code>removeLast()</code> Removes an item from the end of the list <code>getFirst()</code> Gets the item at the beginning of the list <code>getLast()</code> Gets the item at the end of the list"},{"location":"collections_framework/linked_list/introduction#example-usage","title":"Example Usage","text":"<pre><code>import java.util.LinkedList;\n\npublic class LinkedListExample {\n    public static void main(String[] args) {\n        LinkedList&lt;String&gt; list = new LinkedList&lt;&gt;();\n\n        // addFirst() example\n        list.addFirst(\"Apple\");\n        System.out.println(list); \n\n        // addLast() example\n        list.addLast(\"Banana\");\n        System.out.println(list); \n\n        // removeFirst() example\n        list.removeFirst();\n        System.out.println(list); \n\n        // removeLast() example\n        list.addFirst(\"Apple\");\n        list.removeLast();\n        System.out.println(list);\n\n        // getFirst() example\n        System.out.println(list.getFirst()); \n\n        // getLast() example\n        list.addLast(\"Banana\");\n        System.out.println(list.getLast());\n    }\n}\n</code></pre>"},{"location":"collections_framework/vector_list/introduction","title":"Vector List","text":"<p>Go with Thread Safe action is locking its completes.</p>"},{"location":"data_structures","title":"Data Structures","text":"<p>This section covers data_structures.</p> <ul> <li>basics.md</li> </ul>"},{"location":"data_structures/basics","title":"Basics","text":"<p>File Name: Basics.java <pre><code>package data_structures;\n\npublic class Basics {\n\n}\n</code></pre></p>"},{"location":"data_structures/introduction","title":"Data Structures in Java","text":"<ul> <li>A data structure is a way to store and organize  data.</li> <li>Data structures give us the possibility to manage large amounts of data efficiently for uses such as large databases and internet indexing services</li> <li>There are two types of data structures and they are linear and non-linear.</li> </ul>"},{"location":"data_structures/introduction#linear-data-structures","title":"Linear Data Structures","text":""},{"location":"data_structures/introduction#simple-info","title":"Simple Info.","text":"Data Structure Types Operation Types Real-time Examples Array Fixed-size, Dynamic Array Access, Insert, Delete Days in a week; Temperature readings Linked List Single, Doubly, Circular Access, Insert, Delete Music playlist; Treasure hunt clues Stack Array-based, Linked List Push, Pop, Peek Browser history; Undo functionality Queue Simple, Circular, Priority Enqueue, Dequeue, Peek Bank line; Call center queue"},{"location":"data_structures/introduction#detailed","title":"Detailed","text":"Data Structure Optimized Implementation in Java Operations Real-time Example Array <code>int[] arr = new int[5];</code> <code>Integer[] arr = new Integer[5];</code>  (Use primitives over wrapper classes for better performance) Access, Update, Search Storing a fixed number of student grades Linked List <code>List&lt;Integer&gt; list = new LinkedList&lt;&gt;();</code> (Consider using <code>ArrayList</code> for better random access performance) Insert, Delete, Traverse Implementing a playlist where songs can be added or removed dynamically Stack <code>Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;();</code> (Use <code>ArrayDeque</code> instead of <code>Stack</code> for better performance) Push, Pop, Peek Undo functionality in text editors Queue <code>Deque&lt;Integer&gt; queue = new ArrayDeque&lt;&gt;();</code> (Using <code>ArrayDeque</code> is generally more efficient than <code>LinkedList</code>) Enqueue, Dequeue, Peek Print job scheduling in printers"},{"location":"data_structures/introduction#non-linear-data-structures","title":"Non-linear Data Structures","text":""},{"location":"data_structures/introduction#simple-info_1","title":"Simple Info.","text":"Data Structure Types Operation Types Real-time Examples Tree Binary, AVL, Red-Black Insert, Delete, Traversal Org charts; Family tree Graph Directed, Undirected Add/Remove Vertex/Edge, Search Road network; Social networks Heap Min, Max, Fibonacci Insert, Delete, Find Max/Min Task scheduling; Top elements selection Hash Table Chaining, Open Addressing Insert, Delete, Access Book indexing; User data lookup Set HashSet, TreeSet Add, Remove, Contains Unique tags; Removing duplicates Trie Basic, Radix, Suffix Insert, Search, Delete Autocomplete; Spell checking"},{"location":"data_structures/introduction#detailed_1","title":"Detailed","text":"Data Structure Optimized Implementation in Java Operations Real-time Example Tree <code>class TreeNode { int val; TreeNode left, right; }</code> <code>TreeNode root = new TreeNode();</code> (Ensure balanced trees for optimal performance) Insert, Delete, Traverse (In-order, Pre-order, Post-order) File system hierarchy Graph <code>Map&lt;Integer, List&lt;Integer&gt;&gt; graph = new HashMap&lt;&gt;();</code> <code>List&lt;List&lt;Integer&gt;&gt; graph = new ArrayList&lt;&gt;();</code> (Use appropriate collections based on access patterns) Add Edge, Remove Edge, Traverse (DFS/BFS) Social network connections Heap <code>PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;();</code> <code>PriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;&gt;(Collections.reverseOrder());</code> (Choose the right heap implementation based on use case) Insert, Remove Min/Max, Peek Min/Max Task scheduling based on priority Hash Map <code>Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();</code> <code>Map&lt;String, Integer&gt; map = new LinkedHashMap&lt;&gt;();</code> (Use hashing efficiently to minimize collisions) Insert, Delete, Lookup Caching user sessions in web applications Set <code>Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</code> <code>TreeSet&lt;Integer&gt; set = new TreeSet&lt;&gt;();</code> (Choose the right set type based on order requirements) Add, Remove, Check Membership Storing unique user IDs in a system Trie <code>class TrieNode { TrieNode[] children = new TrieNode[26]; boolean isEnd; }</code> <code>TrieNode root = new TrieNode();</code> (Optimize for space and access time by limiting character set size) Insert, Search, Delete Autocomplete feature in search engines"},{"location":"data_structures/introduction#general-optimization-tips","title":"General Optimization Tips","text":"<ul> <li>Prefer using primitive types over their wrapper classes to reduce memory overhead.</li> <li>Minimize object creation and reuse objects whenever possible to reduce garbage collection overhead.</li> <li>Use efficient data structures based on the specific needs of your application, such as choosing <code>ArrayList</code> for random access and <code>LinkedList</code> for frequent insertions and deletions.</li> <li>Profile your application to identify bottlenecks and optimize those specific areas using tools like JProfiler or VisualVM.</li> </ul>"},{"location":"data_structures/introduction#various-data-structure-in-java","title":"Various Data Structure in Java","text":"Standard Data Structure Implementation Note or Java Equivalent Array Implemented as <code>Array</code> or <code>Array[]</code> in Java Stack <code>Stack</code> class in <code>java.util.Stack</code> Queue <code>Queue</code> interface implemented by <code>LinkedList</code> or <code>ArrayDeque</code> in <code>java.util</code> Priority Queue <code>PriorityQueue</code> class in <code>java.util.PriorityQueue</code> Set <code>Set</code> interface implemented by <code>HashSet</code>, <code>TreeSet</code>, etc. Linked List <code>LinkedList</code> class in <code>java.util.LinkedList</code> Doubly Linked List Can use <code>LinkedList</code>, or implement with custom nodes containing next and previous pointers Circular Linked List No native type; can be implemented with custom nodes where the last node links to the first Skip List No native type; typically implemented using custom nodes for efficient search Hash Map <code>HashMap</code> class in <code>java.util.HashMap</code> Heap Can use <code>PriorityQueue</code> for min-heap; max-heap requires custom comparator Trie No native type; can be implemented using nodes with a <code>Map&lt;Character, TrieNode&gt;</code> for children Binary Tree No native type; custom class with nodes having left and right children Binary Search Tree No native type; custom binary tree with ordered insertion and deletion B-Tree No native type; used in databases; can be implemented with classes allowing multiple children Red-Black Tree Implemented as <code>TreeMap</code> or <code>TreeSet</code>, or can be implemented with custom balancing logic AVL Tree No native type; can be implemented with custom balancing based on node heights Graph No native type; can be implemented using adjacency lists (<code>Map&lt;Vertex, List&lt;Vertex&gt;&gt;</code>) or adjacency matrix"},{"location":"data_structures/array/introduction","title":"Array","text":""},{"location":"data_structures/array/introduction#fixed-size-array-time-complexity-table","title":"Fixed Size Array - Time Complexity Table","text":"<pre><code>int[] fixedArray = new int[5];  // Fixed-Size Array Example declares an array of size 5 (0 to 4)\n\nfixedArray[0] = 10; // Adding elements\nfixedArray[1] = 20;\nfixedArray[2] = 30;\nfixedArray[3] = 40;\nfixedArray[4] = 50;\n</code></pre> <ol> <li>Accessing is faster in Arrays but searching, adding or removing will be \"N\" because it works through index.</li> <li>Java offers additional data structures in the java.util package that behave similarly to arrays.</li> <li>basically primitive array values stores the directly the value.</li> </ol> Operation Array Access O(1) Search O(n) Insert O(n) Delete O(n)"},{"location":"data_structures/array/introduction#dynamic-size-array-time-complexity-table","title":"Dynamic Size Array - Time Complexity Table","text":"<ol> <li>Basically array values stores the reference instead of value.</li> <li>Default initial capacity: 10.</li> <li>Why insertion is faster in Dynamic size arrays with <code>O(1)</code>, its due to Amortized.</li> <li>ArrayList typically has constant time O(1) but resizing operation is costly, taking linear time O(n).</li> <li>Resizing does not happen every time an element is added so amortized time complexity for adding elements to ArrayList is O(1).</li> <li>Let say initial array size is 4 and when array is full (e.g., at capacity of 4), a resize operation occurs:<ol> <li>Double the capacity (e.g., from 4 to 8).</li> <li>Copy existing elements, taking O(n) time.</li> <li>After resizing, the next additions again take O(1) until the next resize.</li> </ol> </li> <li>learn about load factor.</li> </ol> Operation Time Complexity Access O(1) Search O(n) Insert (end) Amortized O(1) Insert (middle) O(n) Delete (end) O(1) Delete (middle) O(n) <pre><code>import java.util.ArrayList;\n\nArrayList&lt;Integer&gt; dynamicArray = new ArrayList&lt;&gt;(); // Dynamic Array Example\nArrayList&lt;Integer&gt; dynamicArray2 = new ArrayList&lt;&gt;(20); // Specify an initial capacity of 20 but default is 10\n\ndynamicArray.add(10); // Adding elements\ndynamicArray.add(20);\ndynamicArray.add(30);\n\ndynamicArray.set(1, 25); // Modifying elements\n\ndynamicArray.remove(0); // Removes the element at index 0\n</code></pre> <p>Similar to array is below but this will be explained in detail in other data sturcture section.</p> <pre><code>import java.util.LinkedList;\nimport java.util.Vector; // similar to ArrayList but is synchronized, making it thread-safe.\nimport java.util.Stack; // follows Last-In-First-Out (LIFO) order and is also thread-safe since it extends Vector.\n</code></pre>"},{"location":"data_types","title":"Data Types","text":"<p>This section covers data_types.</p> <ul> <li>basic_data_type_examples.md</li> <li>data_types_examples.md</li> </ul>"},{"location":"data_types/basic_data_type_examples","title":"Basic Data Type Examples","text":"<p>File Name: BasicDataTypeExamples.java <pre><code>package data_types;\n\npublic class BasicDataTypeExamples {\n  public static void main(String[] args) {\n    int dataTypes = 5;\n    String title = \" Basic Data Types\";\n    System.out.println(dataTypes + title);\n    // Below statement will return '37 Basic Data Types' basically 5 + Space (32)\n    // System.out.println(dataTypes + ' ' + title);\n    System.out.println(\"-------------------------\");\n    System.out.println(\"String - words / text quoted by double quotes\");\n    System.out.println(\"int - whole number\");\n    System.out.println(\"float - decimals\");\n    System.out.println(\"char - letter / single character quoted by single quotes\");\n    System.out.println(\"boolean - true or false\");\n  }\n}\n\n\n //Execute the below command\n// javac data_types/BasicDataTypeExamples.java &amp;&amp; java data_types.BasicDataTypeExamples\n</code></pre></p>"},{"location":"data_types/data_types_examples","title":"Data Types Examples","text":"<p>File Name: DataTypesExamples.java <pre><code>package data_types;\n\npublic class DataTypesExamples {\n  public static void main(String[] args) {\n    System.out.println(\"Below is Sachin ODI Stats\");\n    String fullName = \"Sachin Ramesh Tendulkar\";\n    char initial = 'R';\n    int runs = 18426;\n    float strikeRate = 44.83f;\n    boolean active = true;\n\n    System.out.println(\"full name: \" + fullName);\n    System.out.println(\"Initial: \" + initial);\n    System.out.println(\"Runs: \" + runs);\n    System.out.println(\"Strike Rate: \" + strikeRate);\n    System.out.println(\"is Active: \" + active);\n  }\n}\n</code></pre></p>"},{"location":"data_types/data_types_examples#problem-description","title":"Problem Description","text":"<p>Execute below command.     javac basics/DataTypesExamples.java &amp;&amp; java basics.DataTypesExamples</p>"},{"location":"data_types/introduction","title":"Data Types","text":""},{"location":"data_types/introduction#two-data-types","title":"Two Data Types","text":"<ol> <li>Primitive data types (8 - byte, short, int, long, float, double, boolean, char)</li> <li>Non-primitive data types (4 - String, Array, Class, Interface)</li> </ol>"},{"location":"data_types/introduction#eight-primitive-data-types","title":"Eight Primitive Data Types","text":"<ul> <li>Primitive types are predefined (already defined) in Java. </li> <li>A primitive type always has a value.</li> <li> <p>A primitive type starts with a lowercase letter.</p> </li> <li> <p>Integer Types</p> <ol> <li>byte - it has 3 digits up to 127</li> <li>short - it has 5 digits to 32k</li> <li>int - it has 10 digits to 2,147,483,647</li> <li>long - it has 19 digits up to 9,223,372,036,854,775,807</li> </ol> </li> <li>Floating Point Types<ol> <li>float - up to 7 decimal digits and end the value with 5.75f.</li> <li>double - storing 15 decimal digits and end the value with 19.99d.</li> </ol> </li> <li>Other Types<ol> <li>boolean </li> <li>char</li> </ol> </li> </ul>"},{"location":"data_types/introduction#below-is-the-table-for-all-primitive-data-types","title":"Below is the table for all Primitive Data Types.","text":"Data Type Size Description byte 1 byte Stores whole numbers from -128 to 127 short 2 bytes Stores whole numbers from -32,768 to 32,767 int 4 bytes Stores whole numbers from -2,147,483,648 to 2,147,483,647 long 8 bytes Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 float 4 bytes Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits double 8 bytes Stores fractional numbers. Sufficient for storing 15 decimal digits boolean 1 bit Stores true or false values char 2 bytes Stores a single character/letter or ASCII values"},{"location":"data_types/introduction#what-happens-when-we-assign-numbers-outside-the-given-range","title":"What Happens When We Assign Numbers Outside the Given Range?","text":"<p>When you assign a number outside the given range of a byte in Java, which is from -128 to 127, it leads to an overflow. However, the following code will not compile due to a type mismatch:</p> <p><pre><code>byte num = 200; // error: incompatible types: possible lossy conversion from int to byte\nSystem.out.println(num);\n</code></pre> <pre><code>long e = 1000000000000000000000000000L; //error: integer number too large\nSystem.out.println(num);\n</code></pre></p>"},{"location":"data_types/introduction#why-these-ranges-in-these-data-types","title":"Why these ranges in these data types?","text":"<ul> <li>The range of integer data types such as byte, short, int, and long is determined by the number of bits allocated for each type and the way these bits are used to represent signed integers in binary.</li> <li>The ranges are derived from the number of bits and the method of two's complement representation</li> <li>Since two's complement representation allocates one bit for the sign, it allows for an extra negative value compared to positive values. This is why, for example, an 8-bit byte can represent from -128 to 127 (128 negative values including zero).</li> </ul>"},{"location":"data_types/introduction#four-non-primitive-data-types","title":"Four Non-Primitive Data Types","text":"<ul> <li>Non-primitive types are created by the programmer and is not defined by Java (except for String).</li> <li>Non-primitive types can be used to call methods to perform certain operations, while primitive types cannot.</li> <li>non-primitive types can be null.</li> <li> <p>non-primitive types starts with an uppercase letter.</p> </li> <li> <p>String</p> <ol> <li>The String object has methods that are used to perform certain operations on strings. </li> </ol> </li> <li>Array<ol> <li>The Array notes goes here. </li> </ol> </li> <li>Class<ol> <li>The Class notes goes here. </li> </ol> </li> <li>Interface<ol> <li>The Interface notes goes here. </li> </ol> </li> </ul>"},{"location":"data_types/String","title":"String","text":"<p>This section covers String.</p>"},{"location":"data_types/String#string-methods","title":"String Methods","text":"Category Method Description Example Returns <code>charAt()</code> Returns the character at the specified index (position) <code>\"Hello\".charAt(1)</code> returns <code>'e'</code> <code>codePointAt()</code> Returns the Unicode of the character at the specified index <code>\"Hello\".codePointAt(1)</code> returns <code>101</code> <code>codePointBefore()</code> Returns the Unicode of the character before the specified index <code>\"Hello\".codePointBefore(1)</code> returns <code>72</code> <code>codePointCount()</code> Returns the number of Unicode values found in a string. <code>\"Hello\".codePointCount(0, 5)</code> returns <code>5</code> <code>hashCode()</code> Returns the hash code of a string <code>\"Hello\".hashCode()</code> returns <code>69609650</code> <code>length()</code> Returns the length of a specified string <code>\"Hello\".length()</code> returns <code>5</code> <code>isEmpty()</code> Checks whether a string is empty or not <code>\"\"isEmpty()</code> returns <code>true</code> <code>toCharArray()</code> Converts this string to a new character array <code>\"Hello\".toCharArray()</code> returns <code>['H', 'e', 'l', 'l', 'o']</code> <code>toLowerCase()</code> Converts a string to lower case letters <code>\"Hello\".toLowerCase()</code> returns <code>\"hello\"</code> <code>toString()</code> Returns the value of a String object <code>String.valueOf(123).toString()</code> returns <code>\"123\"</code> <code>toUpperCase()</code> Converts a string to upper case letters <code>\"Hello\".toUpperCase()</code> returns <code>\"HELLO\"</code> <code>trim()</code> Removes whitespace from both ends of a string <code>\"  Hello  \".trim()</code> returns <code>\"Hello\"</code> <code>valueOf()</code> Returns the string representation of the specified value <code>String.valueOf(123)</code> returns <code>\"123\"</code> Compares <code>compareTo()</code> Compares two strings lexicographically <code>\"abc\".compareTo(\"abd\")</code> returns <code>-1</code> <code>compareToIgnoreCase()</code> Compares two strings lexicographically, ignoring case differences <code>\"abc\".compareToIgnoreCase(\"ABC\")</code> returns <code>0</code> <code>equals()</code> Compares two strings. Returns true if the strings are equal, and false if not <code>\"hello\".equals(\"hello\")</code> returns <code>true</code> <code>equalsIgnoreCase()</code> Compares two strings, ignoring case considerations <code>\"hello\".equalsIgnoreCase(\"HELLO\")</code> returns <code>true</code> <code>regionMatches()</code> Tests if two string regions are equal <code>\"abcdef\".regionMatches(0, \"abc\", 0, 3)</code> returns <code>true</code> Searches <code>contains()</code> Checks whether a string contains a sequence of characters <code>\"Hello\".contains(\"ell\")</code> returns <code>true</code> <code>indexOf()</code> Returns the position of the first found occurrence of specified characters in a string <code>\"Hello\".indexOf(\"l\")</code> returns <code>2</code> <code>lastIndexOf()</code> Returns the position of the last found occurrence of specified characters in a string <code>\"Hello\".lastIndexOf(\"l\")</code> returns <code>3</code> <code>matches()</code> Searches a string for a match against a regular expression, and returns the matches <code>\"abc123\".matches(\".*\\\\d.*\")</code> returns <code>true</code> Adds <code>concat()</code> Appends a string to the end of another string <code>\"Hello\".concat(\" World\")</code> returns <code>\"Hello World\"</code> <code>join()</code> Joins one or more strings with a specified separator <code>String.join(\", \", \"A\", \"B\", \"C\")</code> returns <code>\"A, B, C\"</code> Removes <code>replace()</code> Searches a string for a specified value, and returns a new string where the specified values are replaced <code>\"Hello\".replace(\"l\", \"p\")</code> returns <code>\"Heppo\"</code> <code>replaceAll()</code> Replaces each substring of this string that matches the given regular expression with the given replacement <code>\"Hello\".replaceAll(\"l\", \"p\")</code> returns <code>\"Heppo\"</code> <code>replaceFirst()</code> Replaces the first occurrence of a substring that matches the given regular expression with the given replacement <code>\"Hello\".replaceFirst(\"l\", \"p\")</code> returns <code>\"Heplo\"</code> <code>split()</code> Splits a string into an array of substrings <code>\"A,B,C\".split(\",\")</code> returns <code>[\"A\", \"B\", \"C\"]</code> <code>subSequence()</code> Returns a new character sequence that is a subsequence of this sequence <code>\"Hello\".subSequence(1, 4)</code> returns <code>\"ell\"</code> <ul> <li>strings_examples.md</li> </ul>"},{"location":"data_types/String/strings_examples","title":"Strings Examples","text":"<p>File Name: StringsExamples.java <pre><code>package data_types.String; \n\npublic class StringsExamples { \n    public static void main(String[] args) {\n\n        String text = \"My Favourite Program is Java\"; \n\n        System.out.println(\"The length of this string: \" + text.length());   // Print the length of the string\n        System.out.println(\"UPPERCASED TEXT:\"+ text.toUpperCase());//Print the string in Uppercase\n        System.out.println(\"lowercased text:\"+ text.toLowerCase()); //Print the string in Lowercase\n        System.out.println(text.indexOf(\"P\")); //Finding the index of Character in String\n    }\n}\n\n\n //Execute the below command\n// javac data_types/String/StringsExamples.java &amp;&amp; java data_types.String.StringsExamples\n</code></pre></p>"},{"location":"data_types/math","title":"Math","text":"<p>This section covers math.</p> <ul> <li>math_examples.md</li> </ul>"},{"location":"data_types/math/math_examples","title":"Math Examples","text":"<p>File Name: MathExamples.java <pre><code>package data_types.math;\n\npublic class MathExamples {\n  public static void main (String[] args) {\n    MathExamples mathExamples = new MathExamples();\n    mathExamples.absExample();\n    mathExamples.ceilFloorAndRoundExample();\n  }\n\n  public void absExample() {\n    int number = -10;\n    int absValue = Math.abs(number);\n    System.out.println(\"Absolute value of -10 is \" + absValue);\n  }\n\n  public void ceilFloorAndRoundExample() {\n    double age = 35.4f;\n    System.out.println(\"My age is \" + age);\n    double forwardMyAge = Math.ceil(age);\n    System.out.println(\"My age after this year: \" + forwardMyAge);\n    double youngAge = Math.floor(age);\n    System.out.println(\"My young age: \" + youngAge);\n    double roundAge = Math.round(age);\n    System.out.println(\"My Round young age: \" + roundAge);\n  }\n}\n</code></pre></p>"},{"location":"data_types/math/math_examples#problem-description","title":"Problem Description","text":"<p>javac data_types/math/MathExamples.java &amp;&amp; java data_types/math/MathExamples</p>"},{"location":"data_types/non_primitive_data_type/introduction","title":"Non Primitive Data Types","text":"<ol> <li>These are reference types because they refer to objects.</li> <li>Few examples are  Strings, Arrays, Classes etc.</li> </ol>"},{"location":"data_types/non_primitive_data_type/fixed_array","title":"Fixed Array","text":"<p>This section covers fixed_array.</p> <ul> <li>fixed_array_example.md</li> </ul>"},{"location":"data_types/non_primitive_data_type/fixed_array/fixed_array_example","title":"Fixed Array Example","text":"<p>File Name: FixedArrayExample.java <pre><code>package data_types.non_primitive_data_type.fixed_array;\n\npublic class FixedArrayExample {\n\n\n  public static void main(String[] args) {\n    FixedArrayExample fixedArrayExample = new FixedArrayExample();\n    fixedArrayExample.listFixedByteArray();\n    fixedArrayExample.listFixedIntegerArray();\n  }\n\n  private void listFixedByteArray() {\n    byte[] byteList = new byte[]{120,121,127};\n\n    for(byte byteValue : byteList) {\n      System.out.println(\"byteValue: \" + byteValue);\n    }\n  }\n\n  private void listFixedIntegerArray() {\n    int[] integerList = new int[]{0,1,0,3,12};\n    int index = 0;\n\n    for(int num : integerList) {\n      if (num != 0) {\n        integerList[index++] = num;\n        System.out.println(index++ + \": \" + integerList[index++]);\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"data_types/non_primitive_data_type/fixed_array/fixed_array_example#problem-description","title":"Problem Description","text":""},{"location":"data_types/non_primitive_data_type/fixed_array/fixed_array_example#fixed-array-example-with-byte","title":"Fixed Array Example with Byte","text":"<p><code>listFixedByteArray</code> is iterating every byte value for each statement.</p> <p><code>listFixedIntegerArray</code> is iterating every non zero integers in the fixed integer array.</p> <p>Command to Run:  </p> <pre><code>javac data_types/non_primitive_data_type/fixed_array/FixedArrayExample.java &amp;&amp; java data_types.non_primitive_data_type.fixed_array.FixedArrayExample\n</code></pre>"},{"location":"data_types/primitive_data_type","title":"Primitive Data Type","text":"<p>This section covers primitive_data_type.</p> <ul> <li>float_types_examples.md</li> <li>integer_types_examples.md</li> </ul>"},{"location":"data_types/primitive_data_type/float_types_examples","title":"Float Types Examples","text":"<p>File Name: FloatTypesExamples.java <pre><code>package data_types.primitive_data_type;\n\npublic class FloatTypesExamples {\n  public static void main(String[] args) {\n    float a = 5.15f; // Float should end with value f\n    double b = 12E4d; // Double should end with value d.\n                      //A floating point number can also be a scientific number with an \"e\" to indicate the power of 10:\n    System.out.println(\"This number is stored in Float:\" + a);\n    System.out.println(\"This number is stored in Double:\" + b);\n  }\n}\n//javac data_types/primitive_datatype/FloatTypesExamples.java &amp;&amp; java data_types.primitive_datatype.FloatTypesExamples\n</code></pre></p>"},{"location":"data_types/primitive_data_type/integer_types_examples","title":"Integer Types Examples","text":"<p>File Name: IntegerTypesExamples.java <pre><code>package data_types.primitive_data_type;\n\npublic class IntegerTypesExamples {\n  public static void main(String[] args) {\n    byte a = 100; // byte datatype stores number from -128 to 127\n    short b = 5000; // The short datatype can store numbers from -32768 to 32767:\n    int c = 10000; // The int datatype can store numbers from -2147483648 to 2147483647.\n    long d = 150000000L; // The long datatype can store numbers from -9223372036854775808 to\n                         // 9223372036854775807. Note that you should end the value with an \"L\"\n    System.out.println(\"This number is stored in byte:\" +a);\n    System.out.println(\"This number is stored in short:\" +b);\n    System.out.println(\"This number is stored in int:\" +c);\n    System.out.println(\"This number is stored in long:\" +d);\n  }\n\n}\n\n//javac data_types/primitive_datatype/IntegerTypesExamples.java &amp;&amp; java data_types.primitive_datatype.IntegerTypesExamples\n</code></pre></p>"},{"location":"leet_code/introduction","title":"Leet Code","text":""},{"location":"leet_code/introduction#leet-code-problems","title":"Leet Code Problems","text":"Problem Quick Solution Brute Force Time Optimized Space Optimized Palindrome O(n) time, O(n) space. Use regex to clean string, convert to lowercase, and compare with its reverse. O(n) time, O(n) space. Clean string by removing non-alphanumeric chars and converting to lowercase. Compare characters from start and end. O(n) time, O(1) space. Two-pointer approach, skipping non-alphanumeric chars and doing case-insensitive comparison. O(n) time, O(1) space. Two-pointer approach, in-place comparison without creating additional strings or character arrays."},{"location":"leet_code/array/easy/move_zeroes","title":"Move Zeroes","text":"<p>This section covers move_zeroes.</p> <ul> <li>move_zeroes_problem.md</li> </ul>"},{"location":"leet_code/array/easy/move_zeroes/move_zeroes_problem","title":"Move Zeroes Problem","text":"<p>File Name: MoveZeroesProblem.java <pre><code>package leet_code.array.easy.move_zeroes;\n\nimport java.util.Arrays;\n\n\npublic class MoveZeroesProblem {  \n  public static void main (String[] args) {\n    int[] nums = {1,0,0,3,12};\n    System.out.println(\"Input: \" + Arrays.toString(nums));\n\n    MoveZeroesProblem moveZeroesProblem = new MoveZeroesProblem();\n\n    System.out.println(\"\\n\" + \"Two Pointer Force:\");\n    int[] bruteForceResult = moveZeroesProblem.bruteForce(nums);\n    System.out.println(\"Output\" + Arrays.toString(bruteForceResult));\n\n    System.out.println(\"\\n\" + \"Two Pointer Technique:\");\n    int[] timeOptimizedResult = moveZeroesProblem.twoPointerTechnique(nums);\n    System.out.println(\"Output\" + Arrays.toString(timeOptimizedResult));\n\n    System.out.println(\"\\n\" + \"Swap Technique:\");\n    int[] spaceOptimizedResult = moveZeroesProblem.swapTechnique(nums);\n    System.out.println(\"Output\" + Arrays.toString(spaceOptimizedResult));\n  }\n\n  public int[] bruteForce(int[] nums) {\n    int count = nums.length;\n    int[] nonZeroNumbers = new int[count];\n    int index = 0;\n\n    for(int num : nums) {\n      if (num != 0) {\n        nonZeroNumbers[index++] = num;\n      }\n    }\n\n    for(int i = 0; i &lt; count; i++) {\n      nums[i] = nonZeroNumbers[i];\n    }\n\n    return nums;\n  }\n\n  public int[] twoPointerTechnique(int[] nums) {\n    int index = 0;\n\n    for(int i = 0; i &lt; nums.length; i++) {\n      if (nums[i] != 0) {\n        nums[index++] = nums[i];\n      }\n    }\n\n    while(index &lt; nums.length) {\n      nums[index++] = 0;\n    }\n\n    return nums;\n  }\n\n  public int[] swapTechnique(int[] nums) {\n    int index = 0;\n\n    for(int i = 0; i &lt; nums.length; i++) {\n      if (nums[i] != 0) {\n        if (i != index) {\n          int temp = nums[i];\n          nums[i] = nums[index];\n          nums[index] = temp;\n        }\n      }\n\n      index++;\n    }\n    return nums;\n  }\n}\n</code></pre></p>"},{"location":"leet_code/array/easy/move_zeroes/move_zeroes_problem#problem-description","title":"Problem Description","text":""},{"location":"leet_code/array/easy/move_zeroes/move_zeroes_problem#283-move-zeroes-easy-two-pointers","title":"283. Move Zeroes (Easy) - Two Pointers","text":"<p>Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.</p> <p>Note that you must do this in-place without making a copy of the array.</p> <p>Example 1: - Input: nums = [0,1,0,3,12] - Output: [1,3,12,0,0]</p> <p>Example 2: - Input: nums = [0] - Output: [0]</p>"},{"location":"leet_code/array/easy/move_zeroes/move_zeroes_problem#approach-1-brute-force","title":"Approach 1: Brute Force","text":"<p>In this approach, we create two loops</p> <ol> <li>Since it's an integer array, all elements are initialized to 0 by default.  </li> <li>Traverse &amp; find zeros count.  </li> </ol> <p>\ud83d\udd52 Time Complexity is linear O(n) since two array iteration and \ud83d\udcbe Space Complexity is linear O(n) but doesn't satisfy the in-place requirement, as it uses extra space.</p>"},{"location":"leet_code/array/easy/move_zeroes/move_zeroes_problem#approach-2-two-pointer-technique-time-optimized","title":"Approach 2: Two-Pointer Technique (Time Optimized)","text":"<p>In this approach, we use two pointers</p> <ol> <li>Simple iteration with keep index (pointer) as 0 and increment only when it find the non zero element (One pointer iterates over each element).  </li> <li>So basically, it will move the non zero in the start, let say from <code>[0,1,0,3,12]</code> to <code>[1,3,12,3,12]</code>.  <p>\ud83d\udd52 Time Complexity is linear O(n) since we traverse the array once and \ud83d\udcbe Space Complexity is constant O(1) since this approach is in-place.</p> </li> </ol>"},{"location":"leet_code/array/easy/move_zeroes/move_zeroes_problem#approach-3-optimized-for-minimum-writes-space-optimized","title":"Approach 3: Optimized for Minimum Writes (Space Optimized)","text":"<p>In this approach, swapping zero and non-zero elements only when necessary to minimize the number of writes.</p> <ol> <li>It is better than the two-pointer technique in terms of reducing the number of operations.</li> <li>This is also better solution for reducing wear on memory and optimizing performance. <p>\ud83d\udd52 Time Complexity is linear O(n) since we traverse the array once and \ud83d\udcbe Space Complexity is constant O(1) as we don\u2019t use any extra space (modifies nums in-place).</p> </li> </ol> <p>Command to Run:  </p> <pre><code>javac leet_code/array/easy/move_zeroes/MoveZeroesProblem.java  &amp;&amp; java leet_code/array/easy/move_zeroes/MoveZeroesProblem\n</code></pre>"},{"location":"leet_code/array/medium/find_score_of_all_prefixes_of_an_array","title":"Find Score Of All Prefixes Of An Array","text":"<p>This section covers find_score_of_all_prefixes_of_an_array.</p> <ul> <li>find_score_of_all_prefixes_of_an_array_problem.md</li> </ul>"},{"location":"leet_code/array/medium/find_score_of_all_prefixes_of_an_array/find_score_of_all_prefixes_of_an_array_problem","title":"Find Score Of All Prefixes Of An Array Problem","text":"<p>File Name: FindScoreOfAllPrefixesOfAnArrayProblem.java <pre><code>package leet_code.array.medium.find_score_of_all_prefixes_of_an_array;\n\nimport java.util.Arrays;\n\n\npublic class FindScoreOfAllPrefixesOfAnArrayProblem {\n\n  public static void main(String[] args) {\n    int[] nums = { 2, 3, 7, 5, 10 };\n    System.out.println(\"Input: \" + Arrays.toString(nums));\n\n    FindScoreOfAllPrefixesOfAnArrayProblem findScoreOfAllPrefixesOfAnArrayProblem = new FindScoreOfAllPrefixesOfAnArrayProblem();\n\n    System.out.println(\"\\n\" + \"Brute Force: Calculate conversion scores for each prefix by iterating through all elements to find the maximum value.\");\n    long[] bruteForceResult = findScoreOfAllPrefixesOfAnArrayProblem.bruteForce(nums);\n    System.out.println(\"Output\" + Arrays.toString(bruteForceResult));\n\n    System.out.println(\"\\n\" + \"Sub Optimal: Maintain a running maximum to compute scores efficiently while iterating through the array.\");\n    long[] subOptimalResult = findScoreOfAllPrefixesOfAnArrayProblem.subOptimalSolution(nums);\n    System.out.println(\"Output\" + Arrays.toString(subOptimalResult));\n\n    System.out.println(\"\\n\" + \"Swap Technique: Use a single pass to accumulate scores and track the maximum value for prefixes efficiently.\");\n    long[] optimizedResult = findScoreOfAllPrefixesOfAnArrayProblem.subOptimalSolution(nums);\n    System.out.println(\"Output\" + Arrays.toString(optimizedResult));\n  }\n\n  public long[] bruteForce(int[] nums) {\n    int n = nums.length;\n    long[] ans = new long[n];\n\n    for (int i = 0; i &lt; n; i++) {\n      long max = Long.MIN_VALUE;\n      long score = 0;\n\n      // Find max for the current prefix and calculate score\n      for (int j = 0; j &lt;= i; j++) {\n        max = Math.max(max, nums[j]);\n        score += nums[j] + max;\n      }\n      ans[i] = score;\n    }\n\n    return ans;\n  }\n\n  public long[] subOptimalSolution(int[] nums) {\n    int n = nums.length;\n    long[] ans = new long[n];\n    long max = Long.MIN_VALUE;\n\n    for (int i = 0; i &lt; n; i++) {\n        max = Math.max(max, nums[i]);\n        ans[i] = (i == 0 ? 0 : ans[i - 1]) + nums[i] + max;\n    }\n\n    return ans;\n  }\n\n  public long[] optimalSolution(int[] nums) {\n    int n = nums.length;\n    long[] ans = new long[n];\n    long max = 0;\n    long score = 0;\n\n    for (int i = 0; i &lt; n; i++) {\n        max = Math.max(max, nums[i]);\n        score += nums[i] + max;\n        ans[i] = score;\n    }\n\n    return ans;\n  }\n}\n</code></pre></p>"},{"location":"leet_code/array/medium/find_score_of_all_prefixes_of_an_array/find_score_of_all_prefixes_of_an_array_problem#problem-description","title":"Problem Description","text":"<p>## 2640. Find the Score of All Prefixes of an Array (Medium) - Prefix Sum</p> <p>We define the conversion array conver of an array arr as follows:</p> <p><code>conver[i] = arr[i] + max(arr[0..i])</code> where <code>max(arr[0..i])</code> is the maximum  value of arr[j] over 0 &lt;= j &lt;= i.</p> <p>We also define the score of an array arr as the sum of the values of the  conversion array of arr.</p> <p>Given a 0-indexed integer array nums of length n, return an array ans of  length n where ans[i] is the score of the prefix nums[0..i].</p> <p>Example 1:  - Input: nums = [2,3,7,5,10]  - Output: [4,10,24,36,56]</p> <p>For the prefix [2], the conversion array is [4] hence the score is 4  For the prefix [2, 3], the conversion array is [4, 6] hence the score is 10  For the prefix [2, 3, 7], the conversion array is [4, 6, 14] hence the score  is 24  For the prefix [2, 3, 7, 5], the conversion array is [4, 6, 14, 12] hence the  score is 36  For the prefix [2, 3, 7, 5, 10], the conversion array is [4, 6, 14, 12, 20]  hence the score is 56</p> <p>Example 2:  - Input: nums = [1,1,2,4,8,16]  - Output: [2,4,8,16,32,64]</p> <p>For the prefix [1], the conversion array is [2] hence the score is 2  For the prefix [1, 1], the conversion array is [2, 2] hence the score is 4  For the prefix [1, 1, 2], the conversion array is [2, 2, 4] hence the score  is 8  For the prefix [1, 1, 2, 4], the conversion array is [2, 2, 4, 8] hence the  score is 16  For the prefix [1, 1, 2, 4, 8], the conversion array is [2, 2, 4, 8, 16]  hence the score is 32  For the prefix [1, 1, 2, 4, 8, 16], the conversion array is [2, 2, 4, 8, 16,  32] hence the score is 64</p> <p>Constraints:</p> <p>1 &lt;= nums.length &lt;= 105  1 &lt;= nums[i] &lt;= 109</p> <p>### Approach 1: Brute Force  **In this approach, time limit will be exceeded in leet code.</p> <ol> <li>Solution involves calculating the conversion array for each prefix.  </li> <li>Each prefix by iterating through all elements up to the current index.  </li> <li>Current index to find the maximum value. Then, we compute the score for that prefix.</li> </ol> <p>\ud83d\udd52 Time Complexity is Quadratic O(n\u00b2) (Outer Loop: O(n) and Inner Loop: O(i) for finding the maximum and calculating the score).  and \ud83d\udcbe Space Complexity is linear O(n) for for storing the result array ans.</p> <p>### Approach 2: Two-Pointer Technique (Sub Optimal)  In this approach, we use two pointers</p> <ol> <li>Simple iteration with keep index (pointer) as 0 and increment only when it  find the non zero element (One pointer iterates over each element).</li> <li>So basically, it will move the non zero in the start, let say from  <code>[0,1,0,3,12]</code> to <code>[1,3,12,3,12]</code>.</li> </ol> <p>\ud83d\udd52 Time Complexity is linear O(n) since we traverse the array once and \ud83d\udcbe  Space Complexity is constant O(1) since this approach is in-place.</p> <p>### Approach 3: Optimized for Minimum Writes (Space Optimized)  In this approach, swapping zero and non-zero elements only when necessary  to minimize the number of writes.</p> <ol> <li>It is better than the two-pointer technique in terms of reducing the  number of operations.</li> <li>This is also better solution for reducing wear on memory and optimizing  performance.</li> </ol> <p>\ud83d\udd52 Time Complexity is linear O(n) since we traverse the array once and \ud83d\udcbe  Space Complexity is constant O(1) as we don\u2019t use any extra space (modifies  nums in-place).</p> <p>Command to Run:  </p> <pre><code>javac leet_code/array/medium/find_score_of_all_prefixes_of_an_array/FindScoreOfAllPrefixesOfAnArrayProblem.java &amp;&amp; java leet_code.array.medium.find_score_of_all_prefixes_of_an_array.FindScoreOfAllPrefixesOfAnArrayProblem\n</code></pre>"},{"location":"leet_code/string/easy/valid_palindrome","title":"Valid Palindrome","text":"<p>This section covers valid_palindrome.</p> <ul> <li>valid_palindrome_problem.md</li> </ul>"},{"location":"leet_code/string/easy/valid_palindrome/valid_palindrome_problem","title":"Valid Palindrome Problem","text":"<p>File Name: ValidPalindromeProblem.java <pre><code>package leet_code.string.easy.valid_palindrome;\n\n\npublic class ValidPalindromeProblem {\n  public static void main(String[] args) {\n    ValidPalindromeProblem solution = new ValidPalindromeProblem();\n\n    // Test cases\n    String famous_example = \"madam\";\n    String example_1 = \"A man, a plan, a canal: Panama\";\n    String example_2 = \"race a car\";\n    String example_3 = \" \";\n\n    // Running test cases using different methods\n    System.out.println(\"Is famous_example 'madam' palindrome: \" + solution.quickSolution(famous_example));\n    System.out.println(\"Is \" + example_1 + \" is palindrome: \" + solution.optimalSolutionUsingInPlaceTwoPointer(example_1));\n    System.out.println(\"Is \" + example_2 + \" is palindrome: \" + solution.optimalSolutionUsingInPlaceTwoPointer(example_2));\n    System.out.println(\"Is \" + example_3 + \" is palindrome: \" + solution.optimalSolutionUsingInPlaceTwoPointer(example_3));\n  }\n\n  public boolean quickSolution(String s) {\n    String cleaned = s.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n    return cleaned.equals(new StringBuilder(cleaned).reverse().toString());\n  }\n\n  public boolean bruteForce(String s) {\n    StringBuilder cleaned = new StringBuilder();\n\n    // Clean the string\n    for (char c : s.toCharArray()) {\n      if (Character.isLetterOrDigit(c)) {\n        cleaned.append(Character.toLowerCase(c));\n      }\n    }\n\n    // Check for palindrome\n    String reversed = cleaned.reverse().toString();\n    return cleaned.toString().equals(reversed);\n  }\n\n  public boolean subOptimalSolutionUsingRecursive(String s) {\n    return subOptimalIsPalindromeRecursive(s, 0, s.length() - 1); // O(n) space for recursion stack\n  }\n\n  private boolean subOptimalIsPalindromeRecursive(String s, int left, int right) {\n    // Base case\n    if (left &gt;= right)\n      return true; // O(1) time\n\n    // Skip non-alphanumeric characters\n    while (left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(left))) { // O(1) time per char\n      left++;\n    }\n    while (left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(right))) { // O(1) time per char\n      right--;\n    }\n\n    // Compare characters\n    if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) { // O(1) time\n      return false;\n    }\n\n    // Recursive call\n    return subOptimalIsPalindromeRecursive(s, left + 1, right - 1); // O(n) recursive calls\n  }\n\n  public boolean optimalSolutionUsingInPlaceTwoPointer(String s) {\n    if (s == null || s.length() == 0)\n      return true; // O(1) time &amp; space\n\n    int left = 0, right = s.length() - 1; // O(1) space\n\n    while (left &lt; right) { // O(n) time\n      // Find next valid character from left\n      while (left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(left))) { // O(1) time per char\n        left++;\n      }\n\n      // Find next valid character from right\n      while (left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(right))) { // O(1) time per char\n        right--;\n      }\n\n      // Compare characters\n      if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) { // O(1) time\n        return false;\n      }\n\n      left++;\n      right--;\n    }\n    return true;\n  }\n}\n</code></pre></p>"},{"location":"leet_code/string/easy/valid_palindrome/valid_palindrome_problem#problem-description","title":"Problem Description","text":""},{"location":"leet_code/string/easy/valid_palindrome/valid_palindrome_problem#125-valid-palindrome-easy-two-pointers","title":"125. Valid Palindrome (easy) - Two Pointers","text":"<p>A phrase is a palindrome if, after converting all uppercase letters into  lowercase letters and removing all non-alphanumeric characters, it reads the  same forward and backward. Alphanumeric characters include letters and  numbers.</p> <p>Given a string <code>s</code>, return <code>true</code> if it is a palindrome, or <code>false</code>  otherwise.</p> <p>Example 1:  - Input: s = \"A man, a plan, a canal: Panama\"  - Output: true  - Explanation: \"amanaplanacanalpanama\" is a palindrome.</p> <p>Example 2:  - Input: s = \"race a car\"  - Output: false  - Explanation: \"raceacar\" is not a palindrome.</p> <p>Example 3:  - Input: s = \" \"  - Output: true  - Explanation: s is an empty string \"\" after removing non-alphanumeric  characters.  - Since an empty string reads the same forward and backward, it is a  palindrome.</p> <p>Constraints:</p> <p>1 &lt;= s.length &lt;= 2 105  s consists only of printable ASCII characters.</p>"},{"location":"leet_code/string/easy/valid_palindrome/valid_palindrome_problem#rough-approach-quick-solution","title":"Rough Approach: Quick Solution","text":"<p>**This quick solution uses regular expressions to clean the string and checks  if it reads the same backward and forward by comparing the cleaned string to  its reversed form.</p> <ol> <li>Regular Expression &amp; String Reversal</li> <li>Each prefix by iterating through all elements up to the current index.</li> <li>Current index to find the maximum value. Then, we compute the score for  that prefix.</li> </ol> <p>\ud83d\udd52 Time Complexity is linear O(n) for (Cleaning string using regex: O(n)  and Reversing string: O(n) and Comparing two strings: O(n)).  and \ud83d\udcbe Space Complexity is linear O(n) for (Storing cleaned string: O(n) and  Reversed string: O(n))</p>"},{"location":"leet_code/string/easy/valid_palindrome/valid_palindrome_problem#approach-1-brute-force","title":"Approach 1: Brute Force","text":"<p>**In this approach, String Manipulation and Reversal will be used.</p> <p>Why Brute Force*?: Creates new string and reverses it - more memory  intensive</p> <ol> <li>Solution involves cleaning the string first by removing non-alphanumeric  characters.</li> <li>and then converting it to lowercase.</li> <li>After that, it checks if the cleaned string is a palindrome by comparing  it to its reverse.</li> </ol> <p>\ud83d\udd52 Time Complexity is Quadratic O(n) (Cleaning Loop: O(n), Reversal: O(n),  Comparison: O(n)).  and \ud83d\udcbe Space Complexity is linear O(n) for for storing the result array ans.</p> <p>Runtime: 14ms Beats 31.25%  Memory: 44.92 MB and Beats 25.15%</p>"},{"location":"leet_code/string/easy/valid_palindrome/valid_palindrome_problem#approach-2-sub-optimal-solution-uses-uses-recursion","title":"Approach 2: Sub Optimal solution uses Uses recursion.","text":"<p>In this approach, we use recursion</p> <ol> <li>Why Sub-Optimal?: Uses stack space and multiple string operations.</li> </ol> <p>\ud83d\udd52 Time Complexity is linear O(n) and \ud83d\udcbe  Space Complexity is constant O(n) due to recursion stack but less efficient  due to stack overhead and not suitable for very long strings due to stack  overflow risk.</p> <p>Runtime: 5ms Beats 42.65%  Memory: 50.09 MB and Beats 5.93%</p>"},{"location":"leet_code/string/easy/valid_palindrome/valid_palindrome_problem#approach-3-optimized-solution-using-two-pointer-without-extra-space","title":"Approach 3: Optimized Solution using Two Pointer without extra space","text":"<p>(In-place two pointer approach also  known as Two-Pointer Technique with In-place Checking)  This solution combines the filtering and palindrome checking in one pass  using two pointers,  making it both time-efficient and space-efficient.</p> <p>It uses a constant amount of space and a single loop with two pointers.</p> <p>\ud83d\udd52 Time Complexity is linear O(n) where n is string length, since we  traverse the entire string once (Single pass through string) and \ud83d\udcbe  Space Complexity is constant O(1) as we don\u2019t use any extra space (modifies  nums in-place).</p> <p>Runtime: 2ms Beats 99.27%  Memory: 43.03 MB and Beats 64.40%</p> <p>javac leet_code/string/easy/valid_palindrome/ValidPalindromeProblem.java &amp;&amp;  java leet_code/string/easy/valid_palindrome/ValidPalindromeProblem</p>"},{"location":"leet_code/string/easy/valid_palindrome_2","title":"Valid Palindrome 2","text":"<p>This section covers valid_palindrome_2.</p> <ul> <li>valid_palindrome2problem.md</li> </ul>"},{"location":"leet_code/string/easy/valid_palindrome_2/valid_palindrome2problem","title":"Valid Palindrome2problem","text":"<p>File Name: ValidPalindrome2Problem.java <pre><code>package leet_code.string.easy.valid_palindrome_2;\n\n\npublic class ValidPalindrome2Problem {\n  public static void main(String[] args) {\n    ValidPalindrome2Problem solution = new ValidPalindrome2Problem();\n\n    // Test cases\n    String famous_example = \"madam\";\n    String example_1 = \"aba\";\n    String example_2 = \"abca\";\n    String example_3 = \"abc\";\n\n    // Running test cases using different methods\n    System.out.println(\"\\nQuick Solution \\n\" + \"-\".repeat(30));\n    System.out.println(\"Is famous_example 'madam' palindrome: \" + solution.quickSolution(famous_example));\n    System.out.println(\"Is \" + example_1 + \" is palindrome: \" + solution.quickSolution(example_1));\n    System.out.println(\"Is \" + example_2 + \" is palindrome: \" + solution.quickSolution(example_2));\n    System.out.println(\"Is \" + example_3 + \" is not palindrome: \" + solution.quickSolution(example_3));\n\n    System.out.println(\"\\nBrute Force \\n\" + \"-\".repeat(30));\n    System.out.println(\"Is famous_example 'madam' palindrome: \" + solution.bruteForce(famous_example));\n    System.out.println(\"Is \" + example_1 + \" is palindrome: \" + solution.bruteForce(example_1));\n    System.out.println(\"Is \" + example_2 + \" is palindrome: \" + solution.bruteForce(example_2));\n    System.out.println(\"Is \" + example_3 + \" is not palindrome: \" + solution.bruteForce(example_3));\n\n    System.out.println(\"\\nSub Optimal \\n\" + \"-\".repeat(30));\n    System.out\n        .println(\"Is famous_example 'madam' palindrome: \" + solution.subOptimalSolutionUsingRecursive(famous_example));\n    System.out.println(\"Is \" + example_1 + \" is palindrome: \" + solution.subOptimalSolutionUsingRecursive(example_1));\n    System.out.println(\"Is \" + example_2 + \" is palindrome: \" + solution.subOptimalSolutionUsingRecursive(example_2));\n    System.out\n        .println(\"Is \" + example_3 + \" is not palindrome: \" + solution.subOptimalSolutionUsingRecursive(example_3));\n\n    System.out.println(\"\\nOptimal \\n\" + \"-\".repeat(30));\n    System.out.println(\n        \"Is famous_example 'madam' palindrome: \" + solution.optimalSolutionUsingInPlaceTwoPointer(famous_example));\n    System.out\n        .println(\"Is \" + example_1 + \" is palindrome: \" + solution.optimalSolutionUsingInPlaceTwoPointer(example_1));\n    System.out\n        .println(\"Is \" + example_2 + \" is palindrome: \" + solution.optimalSolutionUsingInPlaceTwoPointer(example_2));\n    System.out.println(\n        \"Is \" + example_3 + \" is not palindrome: \" + solution.optimalSolutionUsingInPlaceTwoPointer(example_3));\n  }\n\n  public boolean quickSolution(String s) {\n    // Initialize two pointers at start and end\n    // Time Complexity: O(n)\n    // Space Complexity: O(1)\n    int left = 0;\n    int right = s.length() - 1;\n\n    // Compare characters from both ends\n    while (left &lt; right) {\n      if (s.charAt(left) != s.charAt(right)) {\n        // If characters don't match, try skipping current character\n        // from either left or right side\n        return quickSoltutionHelperMethod(s, left + 1, right) ||\n            quickSoltutionHelperMethod(s, left, right - 1);\n      }\n      left++;\n      right--;\n    }\n    return true;\n  }\n\n  // Helper method to check if substring is palindrome\n  private boolean quickSoltutionHelperMethod(String s, int left, int right) {\n    while (left &lt; right) {\n      if (s.charAt(left) != s.charAt(right)) {\n        return false;\n      }\n      left++;\n      right--;\n    }\n    return true;\n  }\n\n  public boolean bruteForce(String s) {\n    for (int i = 0; i &lt; s.length(); i++) {\n      if (bruteForceIsPalindromeRecursive(s, i)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private boolean bruteForceIsPalindromeRecursive(String s, int skip) {\n    int left = 0, right = s.length() - 1;\n\n    while (left &lt; right) {\n      if (left == skip)\n        left++; // Skip the specified character\n      if (right == skip)\n        right--;\n\n      if (s.charAt(left) != s.charAt(right)) {\n        return false;\n      }\n      left++;\n      right--;\n    }\n\n    return true;\n  }\n\n  public boolean subOptimalSolutionUsingRecursive(String s) {\n    // Initialize pointers\n    // Time Complexity: O(n)\n    // Space Complexity: O(1)\n    int left = 0;\n    int right = s.length() - 1;\n\n    // Check characters from both ends\n    while (left &lt; right) {\n      if (s.charAt(left) != s.charAt(right)) {\n        // Try skipping left character\n        if (subOptimalIsPalindromeRecursive(s, left + 1, right)) {\n          return true;\n        }\n        // Try skipping right character\n        return subOptimalIsPalindromeRecursive(s, left, right - 1);\n      }\n      left++;\n      right--;\n    }\n    return true;\n  }\n\n  private boolean subOptimalIsPalindromeRecursive(String s, int left, int right) {\n    while (left &lt; right) {\n      if (s.charAt(left) != s.charAt(right)) {\n        return false;\n      }\n      left++;\n      right--;\n    }\n    return true;\n  }\n\n  public boolean optimalSolutionUsingInPlaceTwoPointer(String s) {\n    // Initialize pointers\n    // Time Complexity: O(n)\n    // Space Complexity: O(1)\n    int left = 0;\n    int right = s.length() - 1;\n\n    // Main loop to check characters\n    while (left &lt; right) {\n      // If characters don't match\n      if (s.charAt(left) != s.charAt(right)) {\n        // Try both possibilities: remove left or right character\n        return optimalIsPalindromeRecursive(s, left + 1, right) ||\n            optimalIsPalindromeRecursive(s, left, right - 1);\n      }\n      left++;\n      right--;\n    }\n    return true;\n  }\n\n  private boolean optimalIsPalindromeRecursive(String s, int i, int j) {\n    // Check if substring is palindrome without any deletion\n    while (i &lt; j) {\n      if (s.charAt(i) != s.charAt(j)) {\n        return false;\n      }\n      i++;\n      j--;\n    }\n    return true;\n  }\n}\n</code></pre></p>"},{"location":"leet_code/string/easy/valid_palindrome_2/valid_palindrome2problem#problem-description","title":"Problem Description","text":""},{"location":"leet_code/string/easy/valid_palindrome_2/valid_palindrome2problem#680-valid-palindrome-ii-easy-two-pointers","title":"680. Valid Palindrome II (easy) - Two Pointers","text":"<p>Given a string s, return true if the s can be palindrome after deleting at  most one character from it.</p> <p>Example 1:  - Input: s = \"aba\"  - Output: true</p> <p>Example 2:  - Input: s = \"abca\"  - Output: true  - Explanation: You could delete the character 'c'.</p> <p>Example 3:  - Input: s = \"abc\"  - Output: false</p> <p>Constraints:</p> <p>1 &lt;= s.length &lt;= 105  s consists of lowercase English letters.</p>"},{"location":"leet_code/string/easy/valid_palindrome_2/valid_palindrome2problem#rough-approach-quick-solution","title":"Rough Approach: Quick Solution","text":"<p>Approach: This uses uses a two-pointer technique to check for mismatches  while traversing from both ends of the string towards the center.  If a mismatch occurs, it checks if either of the substrings (after removing  one character) can form a palindrome.</p> <p>Technique: Two-pointer technique.  Limitation: This solution is incomplete as it doesn't handle the one  character deletion case</p> <p>\ud83d\udd52 Time Complexity is linear O(n), where n is the length of s, as it  iterates from both ends. \ud83d\udcbe Space Complexity is constant O(1)), no additional space is used.</p>"},{"location":"leet_code/string/easy/valid_palindrome_2/valid_palindrome2problem#approach-1-brute-force","title":"Approach 1: Brute Force","text":"<p>**In this approach, we'll try removing each character one by one and checking  if the resulting string is a palindrome.</p> <p>\ud83d\udd52 Time Complexity is Quadratic O(n2), as we potentially check \ud835\udc5b n  possible strings and perform an \ud835\udc42 (\ud835\udc5b) O(n) palindrome check on each. \ud83d\udcbe Space Complexity is constant O(1), since we do not use extra space.</p> <p>Explanation: Tries to remove each character to check for a palindrome,  making it inefficient for larger strings but straightforward.</p> <p>Runtime: 14ms Beats 31.25%  Memory: 44.92 MB and Beats 25.15%</p>"},{"location":"leet_code/string/easy/valid_palindrome_2/valid_palindrome2problem#approach-2-sub-optimal-solution-uses-uses-recursion","title":"Approach 2: Sub Optimal solution uses Uses recursion.","text":"<p>In this approach: This solution uses a single check with two pointers,  attempting to only make the minimum number of recursive calls.</p> <ol> <li>Why Sub-Optimal?: Uses stack space and multiple string operations.</li> </ol> <p>\ud83d\udd52 Time Complexity is linear O(n), for the two-pointer pass. \ud83d\udcbe Space Complexity is constant O(1) as it uses no extra space.</p> <p>Explanation: Efficiently skips one mismatch, checking both alternatives  with recursive-like checks but without true recursion, which keeps it simple  and faster than brute force.</p> <p>Runtime: 5ms Beats 42.65%  Memory: 50.09 MB and Beats 5.93%</p>"},{"location":"leet_code/string/easy/valid_palindrome_2/valid_palindrome2problem#approach-3-optimized-solution-using-two-pointers-with-optimized","title":"Approach 3: Optimized Solution using Two pointers with optimized","text":"<p>validation  Technique: Two-pointer technique with early termination.  Improvements: No string manipulation, Minimal checks, Early termination,  Minimizes the number of comparisons.</p> <p>It uses a constant amount of space and a single loop with two pointers.</p> <p>\ud83d\udd52 Time Complexity is linear O(n) where n is string length, since we  traverse the entire string once (Single pass through string). \ud83d\udcbe Space Complexity is constant O(1) as we only use pointers.</p> <p>Runtime: 2ms Beats 99.27%  Memory: 43.03 MB and Beats 64.40%</p> <p>Run Command:  javac leet_code/string/easy/valid_palindrome_2/ValidPalindrome2Problem.java  &amp;&amp; java leet_code/string/easy/valid_palindrome_2/ValidPalindrome2Problem</p>"},{"location":"leet_code/two_sum","title":"Two Sum","text":"<p>This section covers two_sum.</p> <ul> <li>two_sum_problem.md</li> </ul>"},{"location":"leet_code/two_sum/two_sum_problem","title":"Two Sum Problem","text":"<p>File Name: TwoSumProblem.java <pre><code>package leet_code.two_sum;\n\n\nimport java.util.HashMap;\n\npublic class TwoSumProblem {\n    public static void main(String[] args) {\n        TwoSumProblem ts = new TwoSumProblem();\n        int[] nums = {2, 7, 11, 15};\n        int target = 9;\n\n        System.out.println(\"Brute Force Approach:\");\n        printResult(ts.twoSumBruteForce(nums, target));\n\n        System.out.println(\"Suboptimal Approach:\");\n        printResult(ts.twoSumSuboptimal(nums, target));\n\n        System.out.println(\"Optimal Approach:\");\n        printResult(ts.twoSumOptimal(nums, target));\n    }\n\n    // Brute Force Approach\n    public int[] twoSumBruteForce(int[] nums, int target) {\n        int n = nums.length;\n        for (int i = 0; i &lt; n - 1; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                if (nums[i] + nums[j] == target) {\n                    return new int[]{i, j};\n                }\n            }\n        }\n        return new int[]{}; // No solution found\n    }\n\n    // Suboptimal Approach (Two-pass Hash Table)\n    public int[] twoSumSuboptimal(int[] nums, int target) {\n        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n\n        // First pass: Build the hash table\n        for (int i = 0; i &lt; nums.length; i++) {\n            map.put(nums[i], i);\n        }\n\n        // Second pass: Check for complement\n        for (int i = 0; i &lt; nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement) &amp;&amp; map.get(complement) != i) {\n                return new int[]{i, map.get(complement)};\n            }\n        }\n\n        return new int[]{}; // No solution found\n    }\n\n    // Optimal Approach (One-pass Hash Table)\n    public int[] twoSumOptimal(int[] nums, int target) {\n        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n\n        for (int i = 0; i &lt; nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[]{map.get(complement), i};\n            }\n            map.put(nums[i], i);\n        }\n\n        return new int[]{}; // No solution found\n    }\n\n    private static void printResult(int[] result) {\n        if (result.length == 2) {\n            System.out.println(\"Indices: \" + result[0] + \", \" + result[1]);\n        } else {\n            System.out.println(\"No solution found\");\n        }\n    }\n}\n</code></pre></p>"},{"location":"leet_code/two_sum/two_sum_problem#problem-description","title":"Problem Description","text":"<p># Two Sum (Easy)</p>"},{"location":"leet_code/two_sum/two_sum_problem#problem-statement","title":"Problem Statement","text":"<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return the indices of the two numbers such that they add up to <code>target</code>. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.</p>"},{"location":"leet_code/two_sum/two_sum_problem#examples","title":"Examples","text":""},{"location":"leet_code/two_sum/two_sum_problem#example-1","title":"Example 1","text":"<p>Input:*  <code>nums = [2, 7, 11, 15]</code> <code>target = 9</code> Output: <code>[0, 1]</code> Explanation:  Because <code>nums[0] + nums[1] == 9</code>, we return <code>[0, 1]</code>.</p>"},{"location":"leet_code/two_sum/two_sum_problem#example-2","title":"Example 2","text":"<p>Input:*  <code>nums = [3, 2, 4]</code> <code>target = 6</code> Output:*  <code>[1, 2]</code> </p>"},{"location":"leet_code/two_sum/two_sum_problem#example-3","title":"Example 3","text":"<p>Input:*  <code>nums = [3, 3]</code> <code>target = 6</code> Output:*  <code>[0, 1]</code> </p>"},{"location":"leet_code/two_sum/two_sum_problem#constraints","title":"Constraints","text":"<ul> <li><code>2 &lt;= nums.length &lt;= 10^4</code></li> <li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li> <li><code>-10^9 &lt;= target &lt;= 10^9</code></li> <li>Only one valid answer exists.</li> </ul> <p>Command to Run:  </p> <pre><code>javac leet_code/two_sum/TwoSumProblem.java  &amp;&amp; java leet_code.two_sum.TwoSumProblem\n</code></pre>"},{"location":"oops","title":"Oops","text":"<p>This section covers oops.</p> <ul> <li>basic_class.md</li> </ul>"},{"location":"oops/Introduction","title":"Classes in Java","text":""},{"location":"oops/basic_class","title":"Basic Class","text":"<p>File Name: BasicClass.java <pre><code>package oops;\n\npublic class BasicClass {\n\n}\n</code></pre></p>"},{"location":"oops/inheritance/multiple_inheritance","title":"multiple inheritance","text":""},{"location":"oops/inheritance/single_inheritance","title":"single inheritance","text":""},{"location":"oops/polymorphism/in_real_time","title":"in real time","text":""},{"location":"utils","title":"Utils","text":"<p>This section covers utils.</p> <ul> <li>text_formatter.md</li> </ul>"},{"location":"utils/text_formatter","title":"Text Formatter","text":"<p>File Name: TextFormatter.java <pre><code>package utils;\n\npublic class TextFormatter {\n  public static void printRepeatedChar(char ch, int count) {\n      System.out.println(String.valueOf(ch).repeat(count));\n  }\n\n  public static void printRepeatedString(String str, int count) {\n      System.out.println(str.repeat(count));\n  }\n\n  public static String getRepeatedChar(char ch, int count) {\n      return String.valueOf(ch).repeat(count);\n  }\n\n  public static String getRepeatedString(String str, int count) {\n      return str.repeat(count);\n  }\n\n  // Dash-specific methods for backward compatibility\n  public static void printDashes(int count) {\n      printRepeatedChar('-', count);\n  }\n\n  public static String getDashes(int count) {\n      return getRepeatedChar('-', count);\n  }\n\n}\n</code></pre></p>"}]}